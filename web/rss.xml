
<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Knut Melvær]]></title><description><![CDATA[The blog and website of Knut Melvær]]></description><link>https://www.knutmelvaer.no</link><generator>GatsbyJS</generator><lastBuildDate>Wed, 20 May 2020 19:15:06 GMT</lastBuildDate><item><title><![CDATA[Counting hours (or; how to work less when you want to work much)]]></title><link>https://www.knutmelvaer.no/blog/2020/05/counting-hours/</link><guid isPermaLink="false">https://www.knutmelvaer.no/blog/2020/05/counting-hours/</guid><pubDate>Wed, 13 May 2020 02:00:00 GMT</pubDate><content:encoded><![CDATA[<div><p>I have worked a lot for the almost 2 years I’ve been at <a href="https://www.sanity.io">Sanity.io</a>. Evenings, weekends, you name it. I know what you’re thinking: Another example of the exploitative tech startup churn.</p><p>But I’m not working a lot not because anyone has told me to do so. Rather on the opposite, I probably have at least 5 people, and among them mostly my managers telling me on a weekly basis that I should work less. The culture at Sanity.io isn't that you should <em>crunch it</em> on weekends and late hours, but rather, take time to plan and think on how to use the time one has on the right things. To get more done in less time with fewer distractions. </p><p>I don’t put in a lot of hours because I feel I have to prove myself either. Or because I’m hunting a promotion. I’m in the very privileged position where I’m fairly confident that I’m good at my job, and comfortable with the fact that I have a lot to learn. I put in a lot of hours because I inherently enjoy what I do. I look forward to it. It’s fun. It’s challenging. I learn a lot. </p><h2>The hegemony of work-life (un)balance</h2><p>It must be said, that this deep enjoyment is a relatively new thing for me. I have been at places where I have allowed myself to be consumed by work for all the wrong reasons. I have been through burn-out and depression, and used work as an escape from working with my own mental and emotional health and my tending my relationships. The stuff that <a href="https://lengstorf.com/blog/tag/worklifebalance/">Jason Lengstorf is writing about on his blog</a>. Or <a href="https://basecamp.com/books/calm">Jason Fried and David Heinemeier Hansson over at Basecamp</a>. (I realize that this paragraph doesn't pass the <a href="https://en.wikipedia.org/wiki/Bechdel_test">Bechdel test</a> - <a href="https://twitter.com/kmelve">let me know</a> if you know of someone that should’ve been included. Edit: <a href="https://www.ted.com/talks/arianna_huffington_how_to_succeed_get_more_sleep">I got recommened Ariana Huffington‘s talk about sleep</a>)</p><p>There’s a push towards healthy work-life balance in the tech discourse, especially as a response to predatory practices and unreasonable expectations in the start-up world. VCs that suggest that getting a business up and running (with the kind of growth that’s expected in this part of entrepreneurship) may take a bit more effort than a 40 hour week will get hammered by people who thinks this is setting an unhealthy precedence. Both arguments have merrits.</p><p>Even if you remove high expecations of growth and insert somber Scandinavian values to work-life, building a company and a product will require more time and energy of the people involved compared to what you typically have in a “normal position” at established companies. That makes it all the more important that you create a culture where people can endure for the laung haul, and not hit the wall. And that is my experience of what one tries for at Sanity.io.</p><p>So I am not expected to be available on chat at all times (you set yourself away in focus mode when you need to get deep work done). Meetings are recognized as being expensive in terms of people’s time and attention, thus we try to come to them well-prepared and setting “hard-stops” is normal. If there isn't an agenda or something to actually discuss, we are happy to just call the meeting off.</p><p>So the drivers behind me putting in a lot of hours isn't found in the culture or expecations that surrounds me, it’s coming from within.</p><h2>Vocation versus having a job</h2><p>I do believe it’s crucial to take time to be someone for your family, partner, kids, friends, or pets. To exercise, sleep, taste things, travel into fiction, take part in culture, listen to music, work with your emotional pain, muse about your existence, and seek spiritual experiences (whatever they are for you). Work can get in the way of that. But sometimes the Venn-diagram between work and life will overlap. And then the dichotomy doesn't fit.</p><p>What I’m getting at is the idea of having found a vocation versus having a job. I suspect that many startups begin with founders and early-stage employees that very much has building a product and a business as a vocation, a calling. It might sound a bit precious, but I think you’ll often find the same drive among teachers, athletes, doctors and nurses, and in religious professions (from where the word originates).</p><p>The problem arises when you as a founder or early employee that has now entered into a mangager role, assume that it’s reasonable to expect the same calling or priorities from others. It’s probably cool if they do, but I believe you will be much happier if you accept that people can do great things in the hours you get to spend with them, and still turn off e-mail and Slack notifications to go home to be a dad, a partner, or to something completely different. </p><p>Now that I've entered into a manager role, I’m also worried that my behavior is modelling expectations that I expressively don’t have: I fully understand that other people that have other priorities for what they want and have to spend time on. In fact, I expect it to be a requirement for bring their best selves to work. I have no problem adjusting and planning for not being able to get in touch with a colleague after office hours.</p><p>If you find yourself in having a vocation in a job that you enjoy. That’s great! But remember that’s a privilege that you get to enjoy, and not a reasonable expectation that you can put on others. And to be honest, I find it much more inspiring to work with people who bring other forms of nerdery, interests, and hobbies to the table. </p><h2>I need to be at work less</h2><p>I probably have to do something with my own behaviour and prepare to be less present outside of working hours. I should reduce my activity on Slack in weekends, and be more mindful about when I engage my teammates in work-related discussions during evenings. And remember, we're talking about <em>patterns</em> here, not absolutes. </p><p>I brought my dilemma up to one of my managers: “I keep being told by all of you to work less, but I don't see that I'm really changing my behaviour. And I don't feel I’m on the path to burn-out, but I'm worried by the precedence it may set. So. How should we approach this differently?”</p><p>The advice I got was to approach my days more mindfully by do more planning, to think about what is really important, and to try to measure what I’m actually spending time on, like, in hours. These are activities that I traditionally haven’t eager to do. But as I have gotten more responsibility, I have slowly started to appreciate them more.</p><p>I already do fairly more planning. Both long-term, my upcoming week, my next day, and my day. I keep lists. It has helped me being less reactive, and I do less things that may feel urgent, but is probably not important. But spending as much time on more of the right things is only half of the challenge.</p><p>So I need to start with the same strategy as when you want to manage your weight, but instead of measuring how much energy I consume, I have to measure how many hours I spend on what things. I need to build some habits that doesn't depend as much as my immediate motivation, and set myself up for success for what I want to achieve. I must admit I kinda dread having to dedicate part of my cognitive brain to keep tally of what I’m doing, but all the better reason to do it probably.</p><h2>Know thyself; start smol</h2><p>I know that I probably will continue to thinking about new ideas at any hour, get the urge to get stuff down on paper, roam the web for inspiration, and all these things that you do in knowledge work. My main worry is that I’m modelling behaviour and unreasonable expecations for others, so what I need to fix first is how available and present I am: That begins with being off Slack during weekends. </p><p>Since I do a lot on US time (whilst living in Norway), I will also try to log onto work later in the morning, using the first few hours of the day to read, get some exercise, do chores, plan holidays, and so on. And the big one: I will also try to get into time tracking, and probably start small, by tracking just one type of activity, and take it from there.</p><p>These things are relatively small behavioural changes that I should be able to make happen. I have tried to make sure that the hardest one, starts with relatively low expectations. Start time tracking just one thing. Is the same as starting to run: It’s much easier to drag yourself out to run for 15 minutes than an hour. And getting out the door is the hardest part. </p><p>So this is me acknowledging that there is a door, and a run to be had. And that’s the first step.</p></div>]]></content:encoded></item><item><title><![CDATA[How I put the scroll percentage in the title bar]]></title><link>https://www.knutmelvaer.no/blog/2020/05/how-i-put-the-scroll-percentage-in-the-title-bar/</link><guid isPermaLink="false">https://www.knutmelvaer.no/blog/2020/05/how-i-put-the-scroll-percentage-in-the-title-bar/</guid><pubDate>Fri, 01 May 2020 00:00:00 GMT</pubDate><content:encoded><![CDATA[<div><p>Scroll down!</p><p>  </p><p>   </p><p>   </p><p>  </p><p></p><p>I mean it! Just scroll!</p><p> </p><p> </p><p> </p><p> </p><p> </p><p> </p><p>And then look up. A bit further. Yes, to the area of your tab bar where the <code>&lt;title&gt;</code> content ends up. And then scroll again. </p><p></p><p>There's a percentage there. And it changes when you are scrolling. Kinda cool isn‘t it? Now you can tab away from this site and still have a sense of how far you have read. That surely makes your existence a tad more pleasant, doesn‘t it?</p><p>The idea to put the scroll percentage in the title bar came from <a href="https://twitter.com/round/status/1251992234053885952?s=20">this tweet by @round</a>. </p><p><a href="https://twitter.com/round/status/1251992234053885952?s=20">Look at the tweet.</a></p><p>I didn’t make a browser extension, rather, I just put the mechanics into my own blog post template. Since I’m on Gatsby and React, it was not that hard. Here’s how to do it:</p><p>First I installed the <a href="https://www.npmjs.com/package/react-scroll-percentage"><code>react-scroll-percentage</code></a> package. That takes care of most of the heavy lifting. Then, and I’m honestly feel a bit out of depth here, I thought it made sense to put the actual mechanics into <code>useEffect</code>. It may be that it would have been possible to make Gatsby and React rerender the <code>&lt;title&gt;</code> part in another way, but I was just following my gut here (tell me on Twitter if there‘s a better way). So I ended up with something like this (<a href="https://github.com/kmelve/knutmelvaer-no/blob/master/web/src/templates/blog-post.js">actual code here</a>): </p><pre><code lang="jsx">import React, {useEffect} from 'react'
import {useScrollPercentage} from 'react-scroll-percentage'
import Container from '../components/container'
import BlogPost from '../components/blog-post'
import SEO from '../components/seo'
import Layout from '../containers/layout'
import {toPlainText} from '../lib/helpers'

const BlogPost = ({post}) =&gt; {
  const {title, _rawExcerpt} = post
  const [ref, percentage] = useScrollPercentage()
  
  useEffect(() =&gt; {
    if (post) {
      const percent = Math.round(percentage * 100)
      document.title = `${percent}% ${post.title}`
    }
  }, [percentage])
  
  return (
    &lt;Layout&gt;
      {post &amp;&amp; &lt;SEO title={` ${title}` || 'Untitled'} description={toPlainText(_rawExcerpt || [])} /&gt;}

      &lt;div ref={ref}&gt;
        {post &amp;&amp; &lt;BlogPost {...post} /&gt;}
      &lt;/div&gt;
    &lt;/Layout&gt;
  )
}

export default BlogPost
</code></pre><p>Since react-scoll-percentage uses Intersection Observer, which is <a href="http://caniuse.com/#feat=intersectionobserver">a relatively new browser API</a>, we also need a polyfill for browsers that doesn’t support it yet. First install it as a dependency. </p><pre><code lang="sh">npm i intersection-observer
</code></pre><p>Then we want Gatsby only to use the polyfill in the browser, and import it dynamically when it‘s needed. We’ll do that by inserting this into <code>gatsby-browser.js</code>:</p><pre><code lang="javascript">// gatsby-browser.js

export const onClientEntry = async () =&gt; {
  if (typeof IntersectionObserver === `undefined`) {
    await import(`intersection-observer`);
  }
}
</code></pre><p>And that’s it! Now, marvel at your new updating reading lenght!</p><img src="https://cdn.sanity.io/images/ndjrels0/production/3b09df5d8ad1864a1277f312b61db3bc0ad66230-624x294.gif"></div>]]></content:encoded></item><item><title><![CDATA[Who are the non-technicals?]]></title><link>https://www.knutmelvaer.no/blog/2020/04/who-are-the-non-technicals/</link><guid isPermaLink="false">https://www.knutmelvaer.no/blog/2020/04/who-are-the-non-technicals/</guid><pubDate>Sun, 26 Apr 2020 21:45:00 GMT</pubDate><content:encoded><![CDATA[<div><p>Since I started working in the software industry, I rather often hear phrasing like this:</p><p>– “I’m non-technical, so this doesn’t seem to be for me.”</p><p>– “We need to communicate to the non-technical people too.”</p><p>My “non-technical” liberal arts education would have set me up to interpret these statements to be about <a href="https://en.wikipedia.org/wiki/Neo-Luddism">Luddites</a>, who denounce technology, worried that we will become slaves to the machines. However, it’s seldom people who are prone to break your laptop in protest that’s subject to the category of “non-technical.” More often than not, it’s people that have the same expensive phone and laptop that you have. It’s people who use e-mail, word processors, apps for all sorts of things, spreadsheets, robot vacuums, cars, and whatever back office system they have to endure at work?</p><p>Yeah, you probably see where I’m going with this. I don’t think the term “non-technical” is particularly helpful. Not as a self-description, not as a persona, and not as something we use to characterize other people.</p><p>In fact, to label people, as “non-technical” is probably reinforcing stereotypes and implicit ideas of power. The label used to give a particular agency to the people who make software with code, while it steals it away from those who don’t.</p><p>I often observe it used about one-self in a slightly self-deprecating manner: “Yeah, I don’t understand this; I’m non-technical.” If you say this about yourself, why should you be expected to have opinions and critical questions about whatever “technical” go on? In most cases, it‘s the other party that hasn‘t employed enough care or empathy to jump our of their specialized lingo to communicate what‘s at stake.</p><p>And when we use “non-technical” to decide on our communication strategy, does it help us? I suspect that it most often means that you need to communicate less about the particular features and implementation details of whatever you’re selling, and more about the problems that are representative for a wider group of people to whom you’re trying to sell. In probably all cases, you could say “value-based” or “customer-centered.”</p><p>Not understanding much from an article about the particularities of Typescript’s interface for polymorphic arrays doesn’t make you more “non-technical” than not having read Tolstoj makes you illiterate. And not (yet) knowing how to do programming with words doesn’t make you less technical as not having crawled over the English-channel doesn‘t make you less a swimmer.</p><p>I’m mean, I could get you started with programming in less than a day if you don’t know it already. Because you’re already “technical.” You are so technical that you already know a lot of the operational metaphors and models that go into coding. There nothing in programming you that’s beyond you if you can read this blog. Sure, it takes time to learn patterns and particularities. Sure, some people are more and less motivated by it.</p><p>But that hasn’t to do with their ability to maneuver technology. So think twice about what you mean, the next time you reach for “non-technical” to denote someone, including yourself</p></div>]]></content:encoded></item><item><title><![CDATA[The Web Project Book’s “Implementing Backend”: Putting Sanity.io to the test]]></title><link>https://www.knutmelvaer.no/blog/2020/04/a-practical-application-of-the-web-project-book/</link><guid isPermaLink="false">https://www.knutmelvaer.no/blog/2020/04/a-practical-application-of-the-web-project-book/</guid><pubDate>Sun, 19 Apr 2020 11:30:13 GMT</pubDate><content:encoded><![CDATA[<div><p>I have been following the work of <a href="http://deanebarker.net/">Deane Barker</a> (aka <a href="https://gadgetopia.com/">Gadgetopia</a>) for a while. And although I often find myself disagreeing with him, it's hard to get away from that much of the work on CMS he has been involved is pretty darn insightful. One of his projects is “<a href="https://www.webprojectbook.com/">The Web Project Guide</a>” that he writes together with <a href="https://twitter.com/mrvilhauer">Corey Vilhauer</a>. I recently got aware of <a href="https://www.webprojectbook.com/implement-backend/">the chapter “implementing the backend functionality”</a>, which in this case mostly deals with the content management system.</p><p>So, early disclaimer: I work for <a href="https://www.sanity.io">Sanity.io</a>, where we're making what we call the platform for structured content. It replaces your CMS, but it also gives you more power and flexibility when it comes to how to interact with that content, not just in terms of distribution. It lets you treat content as data. That's the key.</p><p>So, of course, read this as content marketing if you want, but I hope you can get something out of it if you're interested in content management. And yeah, if Deane can be strategic director over at <a href="https://en.wikipedia.org/wiki/Episerver">Episerver</a> while writing this guide (he started it before taking on this position, I believe), I think it's OK for me to see their wirting through the lens of Sanity.</p><p>This post makes most sense if you have at least scrolled through <a href="https://www.webprojectbook.com/implement-backend/">their chapter</a> beforehand, but I'll try my best to give enough context to make sense. This also why I follow the same structure in terms of headings. With that out of the way, let's jump into it!</p><blockquote>Most CMSs can publish content in some form out-of-the-box, but they have to be...persuaded to do it in a way that fulfills your requirements.</blockquote><p>I went ahead and initiated a new project with the “clean templates”, which comes with no content types at all. So little persuasion needed, in fact, Sanity.io is designed not to have to be persuaded into being what you want, but exactly the opposite, it's built to be configured and customized to precisely what you need (<a href="https://sanity.io/create">you can give yourself a head start though</a>).</p><h2>Model implementation</h2><blockquote>The model implementation is your content model working inside your chosen CMS.</blockquote><p>With Sanity.io you get an open-source application that functions as the CMS in most cases. You do model implementation by <a href="https://www.sanity.io/docs/content-modelling">describing schemas in simple JavaScript objects</a>. This is somewhat different compared to most CMSs where you do it with forms in a graphical interface. It may seem more difficult, but it lets developers and people with some JavaScript skills to version control schemas, and have a short way to do more advanced stuff like custom field validation and code-based generation of schemas. It also makes the distance to customizing input components much shorter.</p><p>The <a href="https://webprojectbook.com/implement-backend/#model-implementation">guide mentions</a> that a model is a combination Types, Attributes, and Validation Rules, and uses an “Article” (type) with “Title” and "Publication Date" (attributes), and “minimum length” (validation) as an example. If you run <code>npm i -g @sanity/cli &amp;&amp; sanity init</code> and go through the steps, you'll be ready to make the content model within a couple of minutes. Here's how you make the minimal article example with Sanity:</p><pre><code lang="javascript">// article.js

export default {
  name: 'article',
  type: 'document',
  title: 'Article',
  fields: [
    {
      name: 'title',
      type: 'string',
      title: 'Title',
      validation: Rule =&gt; Rule.min(10).warning('The title should be longer')
    },
    {
      name: 'publishedAt',
      type: 'datetime',
      title: 'Publish date',
      description: 'Choose a date for when the article should be published'
    }
  ]
}</code></pre><p>When you run the studio (it's a single page application built with React) this code will generate a user interface that looks like this:</p><img src="https://cdn.sanity.io/images/ndjrels0/production/0bfdf661b0e0f6ac8584a9b968c02037986be586-2400x1800.png"><p>So far, so good. Where it gets interesting is when it comes to content model limitations. Sanity.io is built for structured content, so we have gone far to make it as flexible as possible.</p><h3>Limitations?</h3><blockquote>However, sometimes you just can’t wrap a CMS around your model requirements.</blockquote><p>Here the authors come with two examples:</p><ul><li>The model supports linking the <em>Article</em> object to an <em>Author</em> object, but it doesn't let you go in the other direction, i.e. the link isn't bi-directional.</li><li>Your model requires a <em>Meeting</em> object to have sub-objects for <em>Topics</em>. Each <em>Topic</em> is also a content object.</li></ul><h3>Bi-directionality</h3><p>Let's add an author type and a new field to the article which is an array of references to the author type (because you want multi-author support, don't you?):</p><pre><code lang="javascript">// author.js

export default {
  name: 'author',
  type: 'document',
  title: 'Author',
  fields: [
    {
      name: 'name',
      type: 'string',
      title: 'Author',
    },
  ],
}</code></pre><pre><code lang="javascript">export default {
  name: 'article',
  type: 'document',
  title: 'Article',
  fields: [
    // the other fields,
    {
      name: 'authors',
      type: 'array',
      title: 'Authors',
      of: [
        {
          type: 'reference',
          to: [{ type: 'author' }],
        },
      ],
    },
  ],
}</code></pre><p>When using the <code>reference</code> attribute/field, Sanity will index those references bi-directionally. So if you wanted to query all <code>authors</code> with their <code>articles</code> although the field is set in the article object, it can be done like this with GROQ using <a href="https://www.sanity.io/docs/groq-joins">joins</a> (<a href="https://4bb85k56.api.sanity.io/v1/data/query/production?query=*%5B_type%20%3D%3D%20%22author%22%5D%7B%0A%20%20name%2C%0A%20%20%22posts%22%3A%20*%5B_type%20%3D%3D%20%22article%22%20%26%26%20references(%5E._id)%5D%7B%0A%20%20%20%20title%0A%20%20%7D%0A%7D&amp;%24slug=%22a-test-post%22">actual example</a>):</p><pre><code lang="javascript">*[_type == "author"]{
  name,
  "posts": *[_type == "article" &amp;&amp; references(^._id)]{
    title
  }
}</code></pre><p>This query can also be baked into the Sanity Studio using <a href="https://www.sanity.io/docs/structure-builder-typical-use-cases#tabs-with-content-previews-a8e5cc70dbc0">split panes</a> to show “incoming references”. This is a minimal example (and of course, you can use the same logic to show “related” documents by pretty much any logic):</p><pre><code lang="jsx">// deskStructure.js
import React, { Fragment } from 'react';
import S from '@sanity/desk-tool/structure-builder';
import QueryContainer from 'part:@sanity/base/query-container';
import Spinner from 'part:@sanity/components/loading/spinner';
import Preview from 'part:@sanity/base/preview';
import schema from 'part:@sanity/base/schema';

const Incoming = ({ document }) =&gt; (
  &lt;QueryContainer
    query="*[references($id)]"
    params={{ id: document.displayed._id }}
  &gt;
    {({ result, loading }) =&gt;
      loading ? (
        &lt;Spinner center message="Loading items…" /&gt;
      ) : (
        result &amp;&amp; (
          &lt;div&gt;
            {result.documents.map(document =&gt; (
              &lt;Fragment key={document._id}&gt;
                &lt;Preview value={document} type={schema.get(document._type)} /&gt;
              &lt;/Fragment&gt;
            ))}
          &lt;/div&gt;
        )
      )
    }
  &lt;/QueryContainer&gt;
);

export const getDefaultDocumentNode = () =&gt;
  S.document().views([
    S.view.form(),
    S.view.component(Incoming).title('Incoming references'),
  ]);

export default S.defaults();
</code></pre><p>This will produce this interface, and by the way, it's real-time, so if someone adds this author to another article, it will appear in the right list without requiring reloading.</p><img src="https://cdn.sanity.io/images/ndjrels0/production/673376ecfe5b453bcc3a0f092669dee3c40e309c-2400x1800.png"><h3>Nested structures</h3><p>The second limitation has to do with nested structures (parent-child). Personally, I tend to avoid putting too much hierarchy into content models, and I suspect it often comes from “sitemap” and “nested menu” thinking where you structure content to make navigation. I prefer representing navigation as a separate content structure with references because that lets us more quickly iterate on navigation structures, but also have different content trees for different presentation layers and purposes. But I digress, let's look at the example:</p><blockquote>Your model requires a Meeting object to have <strong>sub-objects for Topics. Each Topic is also a content object</strong>. To do this, you need to connect a Topic to a Meeting in a parent-child model. However, your CMS doesn’t have a content tree that would allow this, nor does it allow nested objects. <strong>You can link a Topic to a Meeting, but someone else could link another Meeting to the same Topic (not allowed by the model), and it doesn’t stop the Meeting from being deleted and “orphaning” a bunch of Topics (also verboten).</strong></blockquote><p>There are mainly two approaches to this with Sanity, you can either just embed the topic object model in the meeting model because the schema allows for nested objects. You would still be able to query for only topics, and you will never have this orphanage or multiple meetings tied to the same topic, which in this case is unwanted. Here is a simple example:</p><pre><code lang="javascript">// topic.js
export default {
  name: 'topic',
  type: 'object',
  title: 'Meeting topic',
  fields: [
    {
      name: 'name',
      type: 'string',
      title: 'Topic name',
    },
    {
      name: 'description',
      type: 'text',
      title: 'Description',
    },
  ],
}</code></pre><pre><code lang="javascript">// meeting.js
export default {
  name: 'meeting',
  type: 'document',
  title: 'Meeting',
  fields: [
    {
      name: 'date',
      type: 'date',
      title: 'Meeting date',
    },
    {
      name: 'topic',
      type: 'topic',
      title: 'Meeting topic',
    },
  ]
}</code></pre><p>Notice how I have described <code>topic</code> as an object type here, and how I refer to this type in the <code>meeting</code> schema. The interface for this will look like this:</p><img src="https://cdn.sanity.io/images/ndjrels0/production/aa62459165fbb8946d5b057f6fb91e91b6b11c55-2400x1800.png"><p>And the data structure will end up like this:</p><pre><code lang="json">{
  "_createdAt": "2020-04-09T11:21:22Z",
  "_id": "d9996973-58aa-44be-8a8a-c24c7df61b6e",
  "_rev": "lwxf4peCy8NTOg4fhvBuIK",
  "_type": "meeting",
  "_updatedAt": "2020-04-09T11:21:22Z",
  "date": "2020-04-09",
  "topic": {
    "_type": "topic",
    "description": "This is a nested object.",
    "name": "A unique topic tied to this meeting"
  }
}</code></pre><p>And if I wanted to query all meetings and return just the topics in my dataset, I could do it with this GROQ query: <code>*[_type == "meeting"].topic</code>.</p><p>Now, let's make this a bit more interesting, and say that we wanted to implement topic as a dedicated document type, and use references to tie them to meetings. If we want to avoid orphan topics, we need to put the reference on the topic side. If a topic has a reference to a meeting, you can't delete that meeting without removing either the topic or the reference first. Granted, the UI for this flow can (and will get) a bit smoother. But here's how to do it:</p><pre><code lang="javascript">// topic.js
export default {
  name: 'topic',
  type: 'document',
  title: 'Meeting topic',
  fields: [
    {
      name: 'name',
      type: 'string',
      title: 'Topic name',
    },
    {
      name: 'description',
      type: 'text',
      title: 'Description',
    },
    {
      name: 'meeting',
      type: 'reference',
      title: 'Meeting',
      to: [{ type: 'meeting' }],
    },
  ],
}</code></pre><p>This will produce this interface:</p><img src="https://cdn.sanity.io/images/ndjrels0/production/26ca8c02a81d255755040591d406ce0a9a397a4c-2400x1800.png"><p>And if you now try to delete the referenced meeting, you'll get this warning:</p><img src="https://cdn.sanity.io/images/ndjrels0/production/1848820ea7f54674658d17122c5395b8ab0c08ae-2400x1800.png"><p>Sidenote: You can define references as <code>_weak: true</code> if you explicitly don't want this integrity check. </p><h3>Editorial Experience</h3><p>The authors discuss the concepts of <em>Data Coercion</em> and <em>Data Validation</em>, in other words, making sure that it's easy to let editors put in content in the correct format, and validate the content if it's possible to enter it incorrectly. The first example is adding a publish date field for an article, where it doesn't have a time stamp, and the date shouldn't be in the future. Here's how to do exactly that with Sanity:</p><pre><code lang="javascript">{
  name: 'publishedAt',
  type: 'date',
  title: 'Publish date',
  description: "Choose a publish date. Can't be in the future",
  validation: Rule =&gt;
    Rule.custom(
      date =&gt;
        date =&lt; new Date().toISOString().split('T')[0] ||
        `This shouldn't be in the future`
    ),
}</code></pre><p>Sidenote: The <code>validation</code> property also supports promises and any logic you can express in JavaScript, which means that you can validate fields via APIs and whatnot. All fields come with <a href="https://www.sanity.io/docs/validation">common validation rules out-of-the-box.</a></p><p>The next example is rich text editing, but with constraints on formatting. Sanity’s rich text editor is configurable and extendable. It also saves the text into a structured and syntax agnostic format called <a href="https://www.sanity.io/docs/block-content">Portable Text</a>, so that even if you had formatting that you didn't want in your presentation layer, it is pretty easy to ignore it in the implementation. A rich text field with only <strong>bold</strong> (or <code>strong</code>) <em>italics</em> (or <code>emphasis</code>) and linking looks like this: </p><pre><code lang="javascript">// simpleRichText.js
export default {
  name: 'simpleRichText',
  type: 'array',
  title: 'Body',
  of: [
    {
      type: 'block',
      styles: [],
      lists: [],
      marks: {
        decorators: [
          { title: 'Strong', value: 'strong' },
          { title: 'Emphasis', value: 'em' }
        ]
      }
    }
  ]
}</code></pre><img src="https://cdn.sanity.io/images/ndjrels0/production/66783803d9dbc5e403a8e80b2c46f2d345c0e3f1-717x366.png"><p>Moving on, adding a description to the title field explaining it's used as the fall back SEO title, is also pretty effortless. And of course, you can have fields called <code>title</code> with different descriptions throughout the CMS:</p><pre><code lang="javascript">{
  name: 'title',
  type: 'string',
  title: 'Title',
  description: `Used as the fallback if the SEO title isn't set`,
  validation: Rule =&gt;
    Rule.min(10).warning('The title should be longer'),
}</code></pre><img src="https://cdn.sanity.io/images/ndjrels0/production/456c4d608023e17c20650c3bbe84c464454e74b9-699x126.png"><p>The last example is affordances for grouping fields into tabs or sets to lessen the cognitive load. Sanity comes with fieldsets out of the box, and somebody has made <a href="https://www.sanity.io/plugins/sanity-plugin-tabs">a plugin that expresses these as tabs</a>. </p><pre><code lang="javascript">// article.js
export default {
  name: 'article',
  type: 'document',
  title: 'Article',
  fieldsets: [
    {
      name: 'meta',
      title: 'Metadata',
      options: { collapsed: true, collapsible: true },
    },
  ],
  fields: [
    // the fields
  ]
}</code></pre><img src="https://cdn.sanity.io/images/ndjrels0/production/f29511f1b88b9284191c0bdd76c5cd24c3c7d530-860x690.gif"><p>All in all, it seems like Sanity meets all the examples given for content modelling and the examples mentioned. And we've just scraped the top of the ice-berg of what's possible in terms of catering to an awesome editoral experience. Because, it's true as the authors write:</p><blockquote>Cater to your editors. Implement your content model at a level that allows the CMS to help them. The happier they are, the better your content will be, and the longer your CMS implementation will last.</blockquote><p>The Sanity Studio comes with a lot of <a href="https://www.sanity.io/docs/schema-types">field types</a> out of the box, and lets you make <a href="https://www.sanity.io/guides/how-to-make-a-custom-input-component">your own custom input components</a> if you have special data coercion needs, and as we touched on, you can do field validation with promises and JavaScript. </p><h2>Aggregations</h2><p>Since the underlying data for Sanity.io are JSON documents, that can be queried and join on pretty much any key/value the need to explictly author aggregation descreases (want an implementation to group any document that starts with "F" in it's title field (if it has one), no problem: <code>*[defined(title) &amp;&amp; title match "F*"]</code>. </p><p>But there are perfectly sound reasons to make explicit aggregations of content, so let's go through the <a href="https://webprojectbook.com/implement-backend/#aggregations">different types</a> mentioned by the authors.</p><h3>A Content Tree</h3><blockquote>A very common pattern is a “tree” of content, where you have a "root" object with a hierarchy of descendants below it. Every object is a child of another object, and might have one or more children of its own.</blockquote><p>As I previously mentioned, I'm not a big a fan of structure content deeply into a hierarchy. Soon enough editors are required to be “hiearchy janitors”, and there almost always comes a point where you want to break out of that hiearchy or do it differently. But sometimes you actually need to put content into parent-child-like structures where they also have order. For those times, I tend to make another document type with fields to express hierarchies. </p><p>A practical example is how the documentation and its table of contents is done on <a href="https://sanity.io/docs">sanity.io/docs</a>. The articles is a flat list of the <code>article</code> type, while the menu is made as a document type called <code>toc</code> (as in Table of Contents):</p><pre><code lang="javascript">// toc.js
const tocSection = {
  name: 'toc.section',
  type: 'object',
  title: 'Section',
  fields: [
    {
      type: 'reference',
      name: 'target',
      title: 'Target article',
      to: [{ type: 'article' }],
    },
    {
      type: 'string',
      name: 'title',
      title: 'Title',
    },
    {
      type: 'array',
      name: 'links',
      title: 'Links',
      of: [{ type: 'toc.link' }],
    },
  ],
};

const tocLink = {
  name: 'toc.link',
  type: 'object',
  title: 'Link',
  preview: {
    select: {
      title: 'title',
      targetTitle: 'target.title',
    },
    prepare: ({ title, targetTitle }) =&gt; ({
      title: title || targetTitle,
    }),
  },
  fields: [
    {
      type: 'reference',
      name: 'target',
      title: 'Target article',
      to: [{ type: 'article' }],
      description: 'No target article turns the item into a subheading.',
    },
    {
      type: 'string',
      name: 'title',
      title: 'Title',
      description: 'Override title from the target article.',
    },
    {
      type: 'array',
      name: 'children',
      title: 'Children',
      of: [{ type: 'toc.link' }],
    },
  ],
};


const toc = {
  name: 'toc',
  type: 'document',
  title: 'Table of Contents',
  fields: [
    {
      type: 'string',
      name: 'name',
      title: 'Name',
    },
    {
      type: 'string',
      name: 'title',
      title: 'Title',
    },
    {
      type: 'array',
      name: 'sections',
      title: 'Sections',
      of: [{ type: 'toc.section' }],
    },
  ],
};

export default { tocSection, tocLink, toc };</code></pre><p>This is a bit of code, but notice that this is also recursive, meaning that you can make sub-sections. We can also use <a href="https://www.sanity.io/docs/overview-structure-builder">Structure builder</a> to query this structure and group the documents accordingly in other views, which also allows you to browse the same documents by different criteria depending on what you're doing.</p><p>This makes it very easy for us to both test and change the navigation structure if we want to. We could even A/B-test it, if we thought that was a good idea (probably not). Another nice byproduct is that since these are references, we can't outright delete an article that's put into a table of contents. So we keep content integrity even though this system doesn't “know” about its presentation. </p><h3>Folders</h3><p>Sanity doesn't have folders in the traditional sense, so folder like organization happens like the approach above. That being said, someone could totally make a folder tool to give people that affordance. But I'm not sure it's worth the time?</p><h3>Menus or Collections</h3><p>This is pretty much covered by the example above. </p><h3>Tags or Categories</h3><p>You can implement categories using the reference field, and you can get ad hoc tags via the string field:</p><pre><code lang="javascript">// tags.js
export default {
  name: 'tags',
  type: 'array',
  title: 'Tags',
  of: [{type: 'string'}],
  options: {
    layout: 'tags',
  }
}</code></pre><h3>Aggregation as content model or as editor experience?</h3><p>What I think it's good with the way we approach content modelling at Sanity.io is that aggregation can be done either as an implementation detail through queries, as a content model concern through references, or as a workflow mode through structure builder. And these can be done independently.</p><h2>Content Rough-In</h2><p>It sometimes takes a bit of actual building, and some back-n-forth to get the content model right. Preferably, you have done some prior work before diving into the technical implementation. That being said, it's so easy to iterate and test things out with the studio, that I often find myself just coding up fields while I discuss with my team how things should work. In that group there will be the ones who are actually making the presentation layer, as well as the people who will work with the content.</p><p>So although the authors explicitly state that the “rough-in” is <em>not </em>about migration, in my experience, if you go by a content-first approach, you'll almost always need to move some stuff around early on. </p><p>We always try to get real content into the system as early as possible. That's where the learning and the uncovering of the unknowns are. And almost always, you'll discover that you need to structure something differently or rename a field. That's where <a href="https://www.sanity.io/docs/migrating-data">migration scripts</a> or simply <a href="https://www.sanity.io/docs/export">exporting your whole dataset</a> and use find/replace-all and importing it again moves you along. Since your content comes as JSON documents, it's a cakewalk to migrate compared to SQL tables with join tables and whatnot.</p><h2>Templating and Output</h2><p>The authors does a decent job of exemplifying how you integrate your content using a template language. In traditional CMSs you'll get a built-in HTML rendering system, with a chosen templating language. With Sanity, the content will be available through APIs, which let you integrate with any front-end framework (and other things that's not even of the web). The approach is fairly similar though you'll have accessible “placeholders” (aka variables) that you can map out, iterate over, build logic from, and so on. The starter projects over at <a href="https://www.sanity.io/create">sanity.io/create</a> will give you a sense of how it can be put together.</p><h3>Templating languages</h3><p>It's interesting that in the author‘s list of templating languages, there is a glaring lacuna: JavaScript (I guess there's a certain headless CMS blindspot here?) But common templating languages, or front-end frameworks in the JavaScript world are:</p><ul><li><a href="https://reactjs.org/">React</a>, and site-builders like <a href="https://nextjs.org/">Next.js</a> and <a href="https://gatsbyjs.org">Gatsby.js</a></li><li><a href="https://vuejs.org/">Vue</a>, and site-builders like <a href="https://nuxtjs.org/">Nuxt</a>, <a href="https://gridsome.org/">Gridsome</a>, and <a href="https://vuepress.vuejs.org/">VuePress</a></li><li><a href="https://angular.io/">Angular</a>, and site-builders like <a href="https://github.com/scullyio/scully">Scully</a></li><li><a href="https://svelte.dev/">Svelte</a>, and site-builders like <a href="https://sapper.svelte.dev/">Sapper</a></li><li>Node.js based site builders like <a href="https://www.11ty.dev/">11ty</a> which offer a range of templating languages</li></ul><p>We are talking about some fairly large ecosystems here, and approaches like <a href="https://jamstack.org/">JAMstack</a>, which has taken the idea of generating websites from content over APIs to the modern web.</p><p>The authors of the web project book also offer some reflections on using PHP directly to generate output (as the worlds largest CMS does, Wordpress) and why you <em>wouldn't </em>want to do that:</p><ul><li>Templating languages are “safer” in terms of not giving frontend developers powers to accidentally break the whole website</li><li>Templating languages are usually simpler</li><li>Generating output with full programming languages are “crude and unpleasant in most cases”</li></ul><p>There are some sweeping generalizations here that I suspect many front-end developers would disagree with. Using JavaScript along with a templating language in React or Vue gives you both pleasant ways of building the markup, but also pleasant ways of building interactivity and managing state. Interactive user experiences is often a demand, which involves having to deal with state. Following the author‘s advice, you often have to tack that on after the fact, which can lead to breakage and messy projects as well. </p><p>If you use a modern site-builder like Gatsby, it will, in most cases, catch errors and tell you when you're rebuilding the site. And you will not be victim to closed database connections and rouge plugins typical for the CMSes that comes with built-in templating languages (yes, I know you can put caching layers onto those too). </p><p>There is no lack of testimonials of people that enjoy building the web using JavaScript, PHP (also using frameworks like Laravel), or whatnot. I don't think it's fair to say that it is “crude and unpleasant in most cases” anymore.</p><h2>Other Development Tasks</h2><h3>Users, Groups, and Permissions</h3><p>Although you can get pretty flexible access control, I prefer to emphasise trust and accountability when it comes to permissions for people who work with content. With great field description, and validation, and document actions, you can create affordances that remove bureaucracy while giving editors the safe-guards they need. </p><h3>Workflows and Content Operations</h3><p>Using features like Structure Builder and <a href="https://www.sanity.io/docs/custom-workflows">Document Actions</a> you can create different groupings and sortings of your document, based on everything from what they contain to kanban flows, or even user-specific document listings. </p><img src="https://cdn.sanity.io/images/ndjrels0/production/5b646ee63942c8061a18a2eaf0084b6483f5d9a8-720x438.png"><h3>Localization</h3><p>With Sanity, <a href="https://www.sanity.io/docs/localization">localization is an aspect of content modelling</a>, rather than its own dedicated feature. That's a bit unusual, but when you take a closer look it makes sense: It means that you're free to choose between field, document, or even dataset level localization (or a mix). It means you're able to combine personalisation (segmentation) and localization relatively easily (if you think of it, they're two sides of the same coin). </p><h3>Marketing Tools</h3><p>As mentioned above, you can write schemas that let you create specific content for specific groups or markets. You can use Sanity to handle routes on your website (or voice assistant or whatever), which can contain multiple versions of the same content and weights that your system for A/B-testing can use. You can also integrate with Mailchimp, Marketo, Hubspot, or Salesforce if you want to either push or pull content or data from those. </p><h3>Page Composition</h3><p>We tend to promote that you structure your content by not tying it to a specific presentation, but following the mental and operational models in your organization (hence, don't organize it in <em>product pages</em>, but as <em>products</em>). Hence, page composition (or layout) should be a concern of the presentation layer, in most cases, the frontend. Then again, the ability to build landing pages of different modules and content types is a frequent request. Dean and Corey remark in a footnote, that:</p><blockquote>Dynamic page composition is exciting to see in a demo, but editorial teams usually never use it to the level they imagine they will.</blockquote><p>I suspect that they have a point, then again, if you have a productive marketing team, chances are that you are making landing pages to improve SEO and Adwords campaigns on a fairly regular basis. </p><p>With Sanity, you can have page composition, while still keeping it fairly structured. If you build with a design system and create components and modules with a decent level of abstraction. The usual pattern is to create an array-field, and compose dedicated object types to it. <a href="https://www.sanity.io/create?template=sanity-io%2Fsanity-template-nextjs-landing-pages">You can try this simple example on sanity.io/create</a>, where the field looks like this:</p><pre><code lang="javascript">export default  {
  name: 'content',
  type: 'array',
  title: 'Page sections',
  of: [
    { type: 'hero' },
    { type: 'imageSection' },
    { type: 'mailchimp' },
    { type: 'textSection' },
  ]
}</code></pre><p>And here's the field in actions, with an example front-end.</p><p><a href="https://youtu.be/91KRdixZjLY">Watch on Youtube.</a></p><h3>Search, reporting, arching, integrations, and forms</h3><p>The authors also mention search, reporting, archiving, integration, and forms. With Sanity, you can choose to integrate with <strong>search</strong> services like Algolia and lets you customize search inside of the Studio. Using Structure builder you can set up lists with custom filters that let you get an overview (aka <strong>report</strong>) of unused assets, or content with <code>publishDate</code> from last year, or whatever you need. You can even use the <a href="https://www.sanity.io/blog/better-contentops-with-google-analytics-right-inside-the-sanity-studio">Google Analytics plugin to get a list of content with a high bounce rate</a>, in order words, actually use that data for something actionable.</p><img src="https://cdn.sanity.io/images/ndjrels0/production/0071e7dcb6d79e182edd9532fd6d92fb976b12bc-720x405.png"><p>Sanity keeps the patch  history of your documents (like Google Docs) if you want to rewind and restore older versions. You can have an external <strong>archive</strong> by utilising the export endpoint if you prefer to delete documents, or you can add it as a boolean field and “soft delete” documents. <strong>Integrations</strong> are a huge topic, where the benefit of being real-time comes to shine: Set up services to path, augment and create content without having to deal with document locking on race-conditions. </p><p>If you need forms, you can do that too. Check out this <a href="https://github.com/sanity-io/netlify-form-sanity">example with Netlify</a>, or this <a href="https://github.com/NewFrontDoor/ui/tree/master/packages/form">implementation that let's you use Sanity to also build forms that can be serialized and used in a frontend</a>. This is the power of having versatile APIs, and being a content platform, rather than the old CMS conventions but with APIs and an webapp you can't customize as you need.</p><h2>The big picture</h2><p>I wholeheartly agree with Deane and Corey when they assert that “back-end and front-end implementations often run in parallel”. However, their following line isn't necessarily true longer, at leats not with Sanity: “There’s a lot that a back-end team can do before they need the front-end team’s output for templating.“</p><p>If you have empowered your frontend-team to pick modern frontend technologies, they can start building at any time. With Sanity, they will not strictly need a “back-end team” to get the content APIs they need on day 1. Your frontend developers can use the same skills as they do with the frontend. In fact, if you put your developers, your designers, and your content people together in a two hour workshop, they should be able to be working with real content with Sanity Studio, while setting up the shell implementation of the presentation layer, and start sketching out which components and modules that needs to be designed. </p><p>In other words, it's feasable to avoid having to coordinate “two teams”, but rather, have one team that works inter-displinary and focused on rapid and continous iteration. You still may need “back-end engineers” if you need to integrate with other services and back-office systems. They are usually happy because they don't need to deal with the CMS and get powerful APIs that makes their work pleasant.</p><p>And this is not just consultant speak or my content marketing. I have been part of these processes using other systems, but also Sanity. Rather, it's because this approach worke so well for me and my teams, I was happy to join Sanity.io to help other developers work better with content.</p></div>]]></content:encoded></item><item><title><![CDATA[On the limits of MDX]]></title><link>https://www.knutmelvaer.no/blog/2020/02/on-the-limits-of-mdx/</link><guid isPermaLink="false">https://www.knutmelvaer.no/blog/2020/02/on-the-limits-of-mdx/</guid><pubDate>Sun, 16 Feb 2020 23:00:00 GMT</pubDate><content:encoded><![CDATA[<div><p>I feel I must preface this with some hedging, because I'm about to challenge something that many people seem love: MDX.</p><p> I have nothing but respect for those who contribute to the MDX ecosystem. Also, I'm totally the type of person that would love MDX. I have been writing in Markdown since 2004, and one of my first GitHub projects was a <a href="https://github.com/kmelve/WordtoMMDfootnotes">jQuery based markdownfootnotes plugin for Wordpress</a> (jeeze louise don't use this!). At university I had a whole multimarkdown-to-LaTeX setup in <a href="https://www.sublimetext.com/">Sublime Text</a> with <a href="https://pandoc.org/">pandoc</a>, <a href="http://www.bibtex.org/">BibTeX</a>, and PDF preview with <a href="https://skim-app.sourceforge.io/">Skim</a> going for me. It was kinda great (at least for the two weeks the setup worked)</p><p>I don't think MDX should be “considered harmful”, nor that everyone should stop using it. But I think there are some things worth considering before locking your, or rather, others’ content to it. And I'm writing this knowing there might be things I've missed or not considered. Feel free to respond to me with your own blog post, or on <a href="https://twitter.com/kmelve">twitter</a>. I don't think this is <a href="https://www.urbandictionary.com/define.php?term=Not%20a%20hill%20I%20want%20to%20die%20on">the hill I want to die on</a> though. So I'll allocate no more than 3 hours to follow up this discussion. Use them wisely.</p><p>With that out of the way. Let's jump into this. 🏊</p><h2>What is MDX? </h2><p>If you go to <a href="https://mdxjs.com">mdxjs.com</a> it self-defines as “an authorable format that lets you seamlessly write JSX in your Markdown documents.” For those not in the know, JSX is “an XML-like syntax extension to ECMAScript without any defined semantics.“ (at least as proposed by the <a href="https://facebook.github.io/jsx/">draft specification</a>). In order words, MDX, that is, the MDX precompiler, lets you combine the templating syntax usually found in React.js projects with Markdown. It looks something like this:</p><pre><code lang="markdown"># Hello, *world*!

Below is an example of JSX embedded in Markdown. &lt;br /&gt; **Try and change
the background color!**

&lt;div style={{ padding: '20px', backgroundColor: 'tomato' }}&gt;
  &lt;h3&gt;This is JSX&lt;/h3&gt;
&lt;/div&gt;
</code></pre><p>It may look like HTML, because it does, but it's JSX. The intriguing part with MDX, but also the… uhm… problematic part, is that you can do stuff like this:</p><pre><code lang="markdown">import { Button } from './Button'

# Hello world

Hello, I'm still a mdx file, but now I have a button component!

&lt;Button&gt;Click&lt;/Button&gt;</code></pre><p>(example taken from <a href="https://www.docz.site/docs/writing-mdx">docz.site</a>)</p><p>Yep, you can import JSX components and embed them with your run of the mill Markdown prose. If you're documenting your JSX based component library, which is what Docz let you do, this makes all the sense in the world. MDX is also used to author slide decks in <a href="https://github.com/jxnblk/mdx-deck">mdx-deck</a>, which is very appealing if you're tired of clicking around in Keynote/PowerPoint/Google Sheets. Which many of us are. I'm not denying the appeal or usability of MDX for certain things for certain people.</p><p>From a React developer’s standpoint that it's used to writing JSX, MDX seems to be touching on the ethos of Markdown, at least as John Gruber, it's original creator, introduce it on <a href="https://daringfireball.net/projects/markdown/">daringfireball.com</a>:</p><blockquote>Markdown is a text-to-HTML conversion tool for web writers. Markdown allows you to write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid XHTML (or HTML).</blockquote><p>Markdown has always allowed inline and block-level HTML to express things outside of the syntax. Because HTML was the end product. In that way, MDX isn't much different. Markdown's key feature though, is "easy-to-read, easy-to-write". I'm not sure if MDX keeps within, or moves away from this general intent.  Gruber made a syntax that was easier to read and write for anyone not familiar with HTML. I'm not convinced that JSX solves the same problem. </p><h2>What is the problem MDX tries to solve?</h2><p>Markdown was designed at a time where most of the web authoring was still done in HTML. It was also designed when web content was mostly text and images. This isn't the case anymore. Web content has moved towards a much richer set of components, from embeds to interactive codeblocks, to between-paragraphs call to actions.</p><p>MDX seems like an attempt to make these components available to the author in the same syntax used in frontend development (well, as long as your frontend development use JSX). And that's pretty much it. I think.</p><p>But this problem has been solved already. With something they call “rich text editors”..</p><p>There's plenty of content platforms with plenty of rich text editors that spews out plenty of different formats, including markdown, HTML, and abstractions as <a href="https://github.com/bustle/mobiledoc-kit">MobileDoc</a> and <a href="http://portabletext.org/">Portable Text</a>. Medium gained popularity much thanks to its smooth authoring experience, <a href="https://notion.so">Notion</a> now seems to have taken over that hype. Void of HTML and Markdown (well, markdown-like shortcuts works, but is not a requirement), but with rich embeds. Arguably, these interfaces are more friendly and more accessible than learning Markdown, or MDX.</p><p>There had to be at least one reason for Slacks introduction of a rich text editor, yes, <a href="https://www.vice.com/en_us/article/pa7nbn/slacks-new-rich-text-editor-shows-why-markdown-still-scares-people">it wasn't very well executed</a>, and we got Markdown back (I actually got used to the rte), but I suspect they actually attempted to solve real user experience problems: <em>Not everyone wants to learn Markdown</em>.</p><h2>Hey, I'm writing here!</h2><p>I have written React for 20 years (that's recruiter for “since 2015”). I should know how to use my keyboard to paint beautiful JSX components with some lovely props and all that. But for some reason, when I have been made to write MDX. It. just. doesn't. work. I mess the syntax up all the time. Forget that I can't actually be writing Markdown inside of a MDX component (without wrapping it in some MDXprovider something). No syntax highlighting (this may have changed at the time you read this). No helpful error to actually point out where I forgot to close that component. Yeah, I know, but I was really supposed to be writing. Not doing debugging of frontend code. </p><p>And yeah… speaking of those components. Most times I had to use MDX, it was to contribute to someone elses documentation. So that means that I had to actually look up a bunch of documentation just to make a code exampe or a “note”. Sure, I could just <a href="http://www.locusmag.com/Features/2009/01/cory-doctorow-writing-in-age-of.html"><em>TK'ed</em></a> those parts (and I did), but again, it feels uncessary for doing something that could be seemlessly solved with an text editor.</p><p>This my totally subjective experience, but for now MDX is introducing a level of friction that I'm not really ok with when I'm writing. Which takes me to the next section. Other people!</p><h2>So, are we expecting people to use this?</h2><p>I generally have hesitations dividing people into “techies” and “non-techies” (I can be persuaded if you actually identify as a <a href="https://en.wikipedia.org/wiki/Luddite">luddite</a>). But I have been through enough projects as a consultant and have been through enough user tests to be very careful in forcing even Markdown on people who go to work to do content. <strong>Writing with a markup syntax should be opt-in, not forced upon you.</strong> </p><p>You expect a person who probably already have too much stuff to do, to:</p><ol><li>Learn Markdown</li><li>Then learn MDX/JSX and imports</li><li>Internalize your compontent system (that never changes, right?)</li><li>Work with plain files</li><li>Use git or whatnot to actually get the stuff where it needs to go</li><li>Ask you how to troubleshoot their texts <em>when </em>it gets borked</li></ol><p>Sure, you have managed to persuade your client to do it and that's jolly good. But I know that for most people that doesn't share our coding interests, this will not fly. Not the bit. Also, you're asking them to put their content into a certain format that arguably marries it presentation. That's probably OK for a slide deck, but less OK if that content is actually describing something of value inside of your organization. </p><p>And it has nothing to do with people being "technical" or not. Most content people I know can spot an apostrophe from a grave accent after two jaegers after a seminar. They know how syntax works. At least some of the time. It's about what we can reasonably expect people to have to deal with. Should they be learning to write JSX components, when frankly, that's your job?</p><p>“But Knut, I have this client and they love it”. Sure, that's great for you and your client! But now you have another challenge. That client may want their content elsewhere. Or well, redesign their site the year we all do everything in WebGL. Or they just want to switch out their design system with new components. Yes, I know you have an <a href="https://mdxjs.com/advanced/ast">AST</a>. But you know what's better than an AST? Not to have to use an AST. </p><p>Because it's not only moving between formats and languages, it's also how you actually structure your content by what it means, and not after the wims of a specific presentation.</p><h2>You can't unmix cake</h2><p>I work for a <a href="https://www.sanity.io">company that promotes structured content</a>, so you should see this coming from a mile away:</p><p><em>For most uses of MDX you will end up mixing specific presentation concerns with your content. This is not great.</em></p><p>Yeah, it kinda worked for HTML. Until something called iOS came along. And then you had a icky problem. Sure, you could parse it. But have you ever tried to <a href="https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags">parse real-world HTML</a>? You probably rather spend your afternoon on something different. </p><p>For people working with content strategy, content is best stored as ingredients from which you can bake the things that you need when you need it. They have been preaching “structured content” for ages, and fighting with CMSes that force content into WYSIWYG page builders and make editors copy-paste their texts around in small layout boxes prisons. </p><p>Yes, technically you can be really semantic with MDX too. Compose your components to be great meaningful abstractions, not get tempted to use that <code>style</code> attribute, and keep everything neatly separated in their own documents. But there's little in the design and practice of MDX that promotes this use. It is promoted as a way to build rich visual presentations. </p><p>Sometimes you want to make a cake, and that's fine. But you should think really hard if you could feed a lot more people for a lot less effort if you hadn't made the cake in the first place. Ok, this metaphore is pretty tired now. The point is: You should think really hard about how you want to be able to work with your content, the inclinations of whom you want to work with your content, and finally, how sustainable and flexible your structuring of it is.</p><h2>The obligatory section where I try to sell you our thing</h2><p>I get it. I get the tangibility of flat files. I get that it feels good to take your coding skills into your prose. But it's not the best way to work with content. Text editors with familiar affordances that produce typed rich text that can be queryed and serialized into whatever you need is better. Where developers can define the datastructures they need, and editor gets easy to use tools to get their work done. Like what we're building at <a href="https://www.sanity.io">Sanity</a> with <a href="https://www.portabletext.org">Portable Text</a>. </p><p>But it doesn't even need to be Sanity. After we launched with Portable Text, others have recognized that storing rich text in JSON structures has its advantages. No, you will never want to actually read or author the JSON, but you shouldn't need to. That what's React and JSX is best for: building the editorial experiences that doesn't come in the way for writing. That can be reused across frameworks, programming languages, and redesigns.</p><h2>Closing remarks</h2><p>(take a minute to appreciate <a href="https://github.com/mdx-js/mdx/tree/master/packages/remark-mdx">that subtle pun</a>)</p><p><em>With that out of the way</em>, let me reiterate that I don't want to belabor the people behind MDX and adjacent technologies. It obviously brings some people joy. You shouldn't feel bad for using it either, but now at least you have some counter points to make better decisions from. Maybe someone get inspired to prove me wrong and make a structured content pattern library for MDX. That would at least be something. Or use some of my aforementioned allocated three hours of discussion time to tell me everything that's wrong with the Portable Text specification (I welcome it actually, if it can make it better).</p><p>But do make sure you have considered if MDX solves the problem you really should be solving, or if it only tickles your developer fancy.</p></div>]]></content:encoded></item><item><title><![CDATA[Config2020: Some impressions from Figma’s conference]]></title><link>https://www.knutmelvaer.no/blog/2020/02/config2020-some-impressions/</link><guid isPermaLink="false">https://www.knutmelvaer.no/blog/2020/02/config2020-some-impressions/</guid><pubDate>Sat, 08 Feb 2020 08:00:00 GMT</pubDate><content:encoded><![CDATA[<div><p>During my month-long stay in San Francisco, mainly tinkering in the <a href="https://heavybit.com">Heavybit</a> offices, I had the opportunity to attend <a href="https://figma.com">Figma’s</a> first conference, cleverly named <a href="https://twitter.com/hashtag/config2020">Config</a>. Identifying more as a developer, than a designer, I wasn't sure if the conference was “for me”. But I'm a huge fan of Figma. Both because we use it at <a href="https://www.sanity.io">Sanity.io</a> (where I work), and the product kinship that we have: real-time, collaborative, and exstensible applications, for people who make things.</p><img src="https://cdn.sanity.io/images/ndjrels0/production/4adb5c32864e6495f7b4b9b870988b5dec783743-1920x1200.png"><p>Honestly, I wasn’t fully prepared to roam amongst 900+ handsome people towards the end of a pretty busy week, in a pretty busy start of the year. I instantly felt my introvertism blossom arriving at the venue on <a href="https://themidwaysf.com/">The Midway</a>. I got it somewhat tempered by caffeinating on the Diet Coke I fell back on because of endless coffee lines. Fortunately, I had a <a href="https://twitter.com/coreyward">conference buddy</a>, and the overall mood was super friendly.</p><img src="https://cdn.sanity.io/images/ndjrels0/production/15bd179e1c19c9d1ddbda8605a3c6f24d0b1dfb4-1920x1970.png"><p>Having been somewhat involved in <a href="https://vimeo.com/297890293">Webdagene</a> (Norway’s largest web conference that turned into <a href="https://www.y-oslo.com/">Y Oslo</a>), I know how hard it is to organize these things. There should have been more coffee stations, some re-thinking of the people logistics, and pre-signup with limited attendees to the workshop sessions. That being said, I’m super impressed with what the Figma team managed to pull together for their first conference. I have high expectations for next year! (because there will be one next year, right?)</p><p>Following are my take-aways from some of the talks I attended. As of now, only the live-stream from the first keynotes is out, but I’ll add the rest of the videos once they’re published.</p><h2>Welcome to a new decade of design, <a href="https://twitter.com/zoink">Dylan Field</a></h2><p><a href="https://youtu.be/x52k6RdJUyw">Watch on Youtube.</a></p><p>My first real-life encounter with Dylan, the CEO/Founder of Figma, was actually when a couple of colleagues and me got to visit their HQs back in August 2019. We were already starry-eyed when we ringed the front-door. This super-friendly eerily familiar person let us in and found our host there. The shy Scandinavians that we were, and honestly, a bit nervous, we forgot to introduce ourselves properly. Not before after did I realized that we were let in by Dylan (<a href="https://twitter.com/zoink">I blame his artsy Twitter avatar</a>).</p><p>Dylan opened Config pretty much the same way. He set the mood with a down-to-earth approach and a lot of humor that made the floor filled with 900 ambitious and highly skilled people, that’s also aware of the other ambitious and highly skilled people, a bit more relaxed. Of course, he was there to launch some neat features, like better font-pickers (it’s fascinating how “small” improvements may save so many people a lot of time), and new auto-layout gizmos (huge cheer), and deep-linking to make it easier to get your collaborators to the right places.</p><p><a href="https://youtu.be/xL_ruBAwVmo?t=315">Link to Dylan‘s keynote with timestamp</a></p><p>Dylan also included a highly appriciated throwback to <a href="https://twitter.com/fat">@fat</a>’s legendary Pencil Tool video.</p><p><a href="https://twitter.com/fat/status/917841803578970112">Look at the tweet.</a></p><h2>Adding scaffolding to collaboration for deep work, <a href="https://twitter.com/craigmod">Craig Mod</a></h2><p><a href="https://youtu.be/WrAxvpvfB2w">Watch on Youtube.</a></p><p>Dylan was followed by another friendly guy, that introduced a bit of vulnerability and self-reflection on the stage. My inner monologue watching Craig was a mix of “dammit, that’s clever, I wish I had thought of that” and “this is so relatable!”. I think everyone felt it when he talked about making a humongous book out of all the design comps and git commits from the Flipbook development. And a bit of envy from his long-ass walk from south of Tokyo to Kyoto.</p><p>Craig’s talk made me reflect more about how you should actively set healthy constraints for how you approach work, especially creative work. With the constant influx of notifications, it’s sometimes tempting to go full Luddite. What I liked about Craig’s approach, is that he considered how he could use technology and certain rules to both improve the mental environment, but also create other, and perhaps more interesting connections with people. Playing around with synchronicity and asynchronicity.</p><p><a href="https://youtu.be/xL_ruBAwVmo?t=2038">Link to Craig’s keynote with timestamp</a></p><h2>I pressed ⌘B. You wouldn’t believe what happened next, <a href="https://twitter.com/mwichary">Marcin Wichary</a></h2><p><a href="https://youtu.be/kVD-sjtFoEI">Watch on Youtube.</a></p><p>There was a lot of buzz around this talk upfront. With good reason. This was probably the highlight of the conference. Partly because what Marcin brought to the stage is so very relatable for someone who works in a product company. Namely, the complex work that may behind the seemingly simple features. This is especially true when you work with a product that’s real-time and collaborative.  </p><p>Marcin is brutally honest and equally funny. And the slides were brilliant too. I can't really reveal much more of this talk, because it has some spoilers. I guess you just have to see it when it's out.</p><h2>States; a product love language, <a href="https://twitter.com/volanStudio">Lucas Smith</a></h2><p><a href="https://youtu.be/9ohJWYx6dZw">Watch on Youtube.</a></p><p>Lucas Smith’s musings about <em>state</em> in product design resonated with something I many times have felt as a frontend developer. Especially back in the days when I got handed stills from photoshop and such. I believe it’s also some of the motivation behind the “designers should code” thing. His distinctions between imperative and declarative modes of working with the design made a lot of sense too. There’s a negotiation between “how it looks” and “how it should work”. I believe it’s mighty helpful to both aware and to communicate this when you present design and ask for feedback.</p><h2>Open source design. Design is the future of open source., <a href="https://twitter.com/soleio">Soleio</a></h2><p><a href="https://youtu.be/2jlt-1E1Ee0">Watch on Youtube.</a></p><p>I didn’t expect to feel as much at “home” at this conference as I did. Because I’m more of a developer than a (visually oriented) designer (cue the “everyone is a designer” debate). But I really connected with most of the talks because there so many concerns that are in common. Open source is one of them, and it was interesting to hear Soleio talk about his views on open source. Not just inherently interesting, but also because Soleio is founder and partner at the VC fund Combine. As someone working at a startup, I seek to understand the <em>weltanschauung </em>of those investing in technology and design.</p><p>Soleio suggested that open source is perhaps less about the access to the material (i.e., the code, or the vectors), and more about that it allows people to reshape what it can be used for. His prime example was the invention of spreadsheets for budgeting and calculus, and how it was reshaped by the <a href="https://www.vox.com/culture/2018/1/11/16877966/shitty-media-men-list-explained">Shitty Media Men List</a> and the #metoo movement.</p><p>I also appreciated the rush of nostalgia when Soleio brought forth <a href="https://joshuadavis.com/ps1-praystation-v2">Joshua Davis’ PrayStation CD-ROM</a>, released back in the days when Flash was a thing.</p><h2>Open source design. Designing with the Community., <a href="https://twitter.com/miguelsolorio_">Miguel Solorio</a></h2><p><a href="https://youtu.be/yZUZk9B-PlE">Watch on Youtube.</a></p><p>Miguel is the only designer in the surprisingly small team behind VS Code. He told us how his team involved the community in their design processes. And by the community, we’re talking one of, if not the, most popular code editor. That seems like a stupendous amount of pressure when you have to make design decisions that affect a tool that millions of people use for their work every day. Again, talks are always more interesting when they talk about hard-earned lessons, and they came improved from it. Definitively one of the talks I’ll revisit for inspiration on how we can get better at involving Sanity’s community when we’re figuring out new stuff.</p><h2>Joyful Subversions, <a href="https://twitter.com/mayli">May-Li Khoe</a></h2><p><a href="https://youtu.be/Aalyplbv5Mo">Watch on Youtube.</a></p><p>It’s not often I get teary-eyes at conferences. But May-Li <em>subverted</em> my professional conference attendance posture and dug right down to both existentialism and humanity. It’s so easy to get bogged down in all the bubbly concerns in growing a startup, that it’s easy to forget that what you are making and spending time on realizing, may be used to improve people’s lives in small and big ways.</p><p>I was amused to learn that the turntable icon that I chose for my mac’s user account because I didn’t have any selfies at the time, and never bothered to change it, was made by May-Li.</p><p>I think I’ll just keep indefinitely.</p><img src="https://cdn.sanity.io/images/ndjrels0/production/d64af8cfea6bc73f2509f7e3248568486dea5f0c-1336x972.png"><p></p></div>]]></content:encoded></item><item><title><![CDATA[This blog runs on public code, without secrets]]></title><link>https://www.knutmelvaer.no/blog/2020/02/this-runs-on-public-code-without-secrets/</link><guid isPermaLink="false">https://www.knutmelvaer.no/blog/2020/02/this-runs-on-public-code-without-secrets/</guid><pubDate>Sun, 02 Feb 2020 20:38:43 GMT</pubDate><content:encoded><![CDATA[<div><p>I have kept the code that powers this blog in a private <a href="https://github.com/kmelve/knutmelvaer-no">GitHub repository</a> for a while. Partly because I wasn't super proud of my code, but also because I wasn't sure if I had put something in it that wasn't for public consumption, that is, secret tokens.</p><p>Since people kept asking me about how I did the <a href="https://www.knutmelvaer.no//blog/2019/06/getting-started-with-webmentions-in-gatsby/">webmentions stuff</a>, and the twitter stuff, and the statistics stuff, I decided to make it public. So I did clean up the code a bit and added <a href="https://github.com/kmelve/knutmelvaer-no/blob/master/README.md">a disclaimer in the README.md</a>.</p><p>To deal with the “there might there be secrets” situation, I used a handy little command line tool called <a href="https://rtyley.github.io/bfg-repo-cleaner/">BFG Repo-Cleaner</a>. It goes through all your commits in all your branches and rewrites history to not the include the file you wish you hadn't commited:</p><pre><code lang="text">bfg --delete-files .env</code></pre><p>Afterwards you can <code>git push --force</code> to overwrite the history stored on GitHub.</p><p>To install BFG, you can follow the installation instructions, or if you are on macOS and have Homebrew installed (as you should), you can run:</p><pre><code lang="text">brew install bfg</code></pre><p></p></div>]]></content:encoded></item><item><title><![CDATA[Smash your writer’s block with The Hulk Summary™]]></title><link>https://www.knutmelvaer.no/blog/2020/01/smash-your-writer-s-block-with-the-hulk-summary/</link><guid isPermaLink="false">https://www.knutmelvaer.no/blog/2020/01/smash-your-writer-s-block-with-the-hulk-summary/</guid><pubDate>Fri, 17 Jan 2020 08:00:00 GMT</pubDate><content:encoded><![CDATA[<div><ul><li>WRITING IS HARD</li><li>YOU THINK TOO MUCH!</li><li>WE HAVE A SOLUTION</li><li>THE HULK SUMMARY!</li><li>CHANNEL INNER HULK VOICE!</li><li>BULLET LIST!</li><li>FEW WORDS</li><li>SAY IT. EFFECTIVE!</li><li>NOW, SMASH CAR!</li></ul><p>Look, when you work with content, it’s not always easy to get going. Perhaps you only manage to come up with the same tired clichés, or you’re too close to the product and find yourself knee-deep on a tangent describing how the design choices were inspired by something your uncle said in a birthday party.</p><p>Whatever it is that keeps you from writing that succinct post that presents the what, how, and why to your readers without wasting their time, there is a remedy. We called it “The Hulk Summary”.</p><p>The method is simple. First channel your inner Hulk voice (everyone has one hidden in them somewhere), add a touch of rage and use it to describe whatever you need to get writing on. Hammer down that shift key (caps lock is a cop-out) and type max 4 words for each bullet to capture the core sentiment of what you’re arguing. The constraints will set your mind free.</p><p>You might not find crude shouting methodology enough to tease out the core of what you try to say. I'm happy to announce that The Hulk Summary™ is fully compatible with renowned communication frameworks proven by probably too expensive consultancy hours, such as the <a href="https://strategyu.co/scqa-a-framework-for-defining-problems-hypotheses/">SCQA-model</a> from <a href="http://www.barbaraminto.com/">The Minto Pyramid Principle</a>. Put differently:</p><ul><li>WHAT SITUATION!</li><li>COMPLICATION! DIFFICULTIES!</li><li>I HAVE QUESTION!</li><li>ANSWERS ARE DUE.</li></ul><p>This method will most definitively not be developed further. We have loads to things to ship over at <a href="https://www.sanity.io/blog">sanity.io</a>. But now that it is introduced to a wider audience, we would love to hear your success stories about how it saved your whole content marketing department from writer’s block and pencil fear. Or how you made an interesting friendship from using it as a quirky icebreaker at a gathering. Literally hit us up on <a href="https://twitter.com/kmelve">Twitter</a> and let us know, hashtag thehulkmethod.</p><p><em></em></p><p><em>(No Banners were hurt in writing this blog post.)</em><br></p></div>]]></content:encoded></item><item><title><![CDATA[2019 – A personal retrospective]]></title><link>https://www.knutmelvaer.no/blog/2020/01/2019-a-personal-retrospective/</link><guid isPermaLink="false">https://www.knutmelvaer.no/blog/2020/01/2019-a-personal-retrospective/</guid><pubDate>Thu, 02 Jan 2020 23:00:00 GMT</pubDate><content:encoded><![CDATA[<div><p><a href="https://lengstorf.com/2019-personal-retrospective/">Jason’s personal retrospective</a> inspired me to look back at 2019 in order to gauge where I have been and where I want to be at the end of 2020. It seems useful and mildly interesting to have a record of the high-level stuff you have been occupied with, and establish some goals. It’s also an opportunity to be open about ambitions and reflect on some of the struggles that comes with being human.</p><h2>Where was I at the end of 2018?</h2><p>Since I didn't write a retrospective last year, I'll have to construct one. At the end of 2018, I was looking back at a year where I moved from the western to the eastern part of the country, close to Oslo, Norway’s capital city. I had also changed jobs, ending my three-year tenure as a technology/UX consultant at <a href="https://www.netlife.com">Netlife</a>, and starting as Head of Developer Relations at <a href="https://sanity.io">Sanity.io</a>. It was the year where I finally sought professional help for my recurring depressions, and got <a href="https://www.instagram.com/p/BndPVcJAXJZ/">a new Whippet puppy</a>.</p><h2>How did I do in 2019?</h2><p>I didn’t blog any goals in 2019, but there were some that emerged during the year. It became increasingly clear to me that I needed to improve my work-life balance, invest more in my personal relationships, and be more structured and focused on how I approach my work.</p><h3>Work-life balance</h3><p>I think of this <em>a lot</em>. And frankly, it’s complicated. I think we shouldn’t expect people to put in more than 40 hours a week, while I often do work more myself because I enjoy it (not because it’s expected of me). Setting boundaries is important though. During 2019 I have managed to develop the habit where I mostly manage to take weekends and holidays completely off in terms of typing on keyboards. Since a lot of my work involves staying on top of social media accounts, and developer community, it’s hard to stay completely out of the loop, so I’ll still be checking in more or less frequently, but not participate. Deleting Slack from my phone and keeping my laptop closed and out of the way has been effective measures keeping me from “accidentally working” during my vacations. During longer periodes of free time I keep catching up to a minimum, once in a day or few.</p><p>On the other side: It’s fun and exciting to work at a startup like Sanity.io, especially because I thrive on learning new things and putting out stuff. There’s also always something to do. And even though I’m regularly reminded to take time off and not work too much, it’s hard not to when you’re motivated. There’s no lack of advice against burn-out out there, and having previously experienced it in my past-life as a Ph.D. student, I’m well aware of the mechanics. At the same time, I’m super privileged working with something I enjoy every day, and in a welfare state that gives me a lot of existential security.</p><h3>More focus, more structure</h3><p>A big change for me in 2019 is how I approach creative work. Previously, the process for me has usually been coming up with something based on some inspiration or idea that hit me, acting on it immediately, and getting it out. I was afraid that if I waited to act on an impulse and not get it out relatively fast, it would wither away. Although this approach has in many cases worked very well for me, it doesn’t scale well. Especially if you’re trying to do stuff more strategically with other people.</p><p>So the two things I have practiced a lot and got better on during 2019 are <em>planning</em> and <em>prioritization</em>. An important note is that I don't do this to be more productive in terms of more output, that was never the problem, but because I wanted to spend my time on the <em>right things</em> (or the things we wanted to check were the right things). In a way, more focus and more structure will enable me to work less and get same amount of things done. </p><p>I really got to put my goals to the test when we planned a pretty hefty release schedule for November and December. If I hadn't been diligent with planning and prioritization, I wouldn't be able to get stuff done. The proof is in the eating (and also making) of the pudding, as they say.</p><h3>Mental health and personal relationships</h3><p>I also spent 2019 trying to take better care of my own mental health and paying more attention to my personal relationships. It hasn’t been just smooth sailing. I have lived with recurring depressions pretty much my whole adult life and it took a long time before I recognized what was going on. After I sought help I have been able to more quickly identify when depression hits, and I have been able to curb a lot of the behavior that comes with it. Cognitive Behavioural Therapy has worked for me, but it’s only one way to go about it. I started going to a therapist again. I’m generally doing fine, but I don’t want to get blindsided by depression again.</p><p>I have started dedicating more time and attention to the people around me: family, and friends. I realized how I avoided contact because of my own insecurities, and how I haven’t really been present when I have been around them. In 2019, I actively sought out contact and practiced being more present, open, and forthcoming. Although this has been generally a positive turn, I have also had to work with some difficult stuff in my close family that is still unresolved. I guess that will spill over as a goal for 2020.</p><h2>What’s up for 2020?</h2><p>I don’t think I’ll set some big life-changing goals for 2020, but rather, continue working with the goals that emerged in 2019. </p><ul><li><strong>Work-life balance.</strong> Take care of our horses once a week (my partner does it for the rest of the week). Plan more hiking trips during summer. Uphold a minimal physical exercise regime. Do more with friends and colleagues outside of work.</li><li><strong>More focus, more structure</strong>. Practice saying “no” more. Be more diligent about putting plans to paper. Write more about what I learn about how to work (in order to “slow-think” it).</li><li><strong>Mental health and personal relationships</strong>. Practice recognizing negative thoughts and identifying techniques to prevent them. Be more open about how I’m actually doing to those close to me. Prioritize time with family and figure out how to be an uncle.</li></ul><p>Looking at what I ended up writing, it hits me that all this is probably pretty demographically typical for a person in the 30s living in the democratic West. Of course, there’s a bunch of goals and ambitions that pops up when you start thinking about them, but I’ll put them on the backlog for now.</p><h2>What about you then?</h2><p>There seems to be no lack of people with advice and tips on self-improvement. My main source of inspiration is the <a href="http://5by5.tv/b2w/">Back to Work</a> podcast with <a href="https://danbenjamin.com/">Dan Benjamin</a> and <a href="http://www.merlinmann.com/">Merlin Mann</a> (which is way goofier than the wrapping may seem). The aforementioned Jason Lengstorf also has some resources for you <a href="https://lengstorf.com/2019-personal-retrospective/">in his blog post</a>. Wherever or whomever you get inspiration from, taking the time to reflect and write about where you have been and where you want to go seems like a no-brainer. Whether you want to share it with the world, is entirely up to you.</p></div>]]></content:encoded></item><item><title><![CDATA[Ode to LICEcap, the simple GIF screen capture tool]]></title><link>https://www.knutmelvaer.no/blog/2019/10/ode-to-licecap/</link><guid isPermaLink="false">https://www.knutmelvaer.no/blog/2019/10/ode-to-licecap/</guid><pubDate>Sun, 20 Oct 2019 08:00:00 GMT</pubDate><content:encoded><![CDATA[<div><p>The folks at Apple Computers Inc. really wanted me to upgrade to <a href="https://arstechnica.com/gadgets/2019/10/macos-10-15-catalina-the-ars-technica-review/">macOS Catalina</a>, so I did. After having nervously lingered in front of the unmoving progress bar of impending doom for two hours while the upgrade script made sure that all of my millions of node_modules files had the correct sandboxed permissions, I was finally let into my tool of digital self-expression again. Only to discover that the brilliant engineers of Palo Alto had decided that 32-bit apps weren’t in vogue anymore. You know, like reliable keyboards and SD-card slots.</p><img src="https://cdn.sanity.io/images/ndjrels0/production/ec262548b665f086808ace3e4fb02a0bb543d3f4-675x554.png"><p>But this post isn’t about how Apple has lost its edge with its <a href="https://goo.gl/maps/QsTYwoDtEozHpMgr7">new perfect circular new campus</a>, but about one of my favorite little apps, the GIF screen capture tool <a href="https://www.cockos.com/licecap/">LICEcap</a>.</p><p>Not a day goes by without me having to record something I do on the screen. It can be to document some bug I found, show my colleagues at <a href="https://www.sanity.io">Sanity.io</a> something cool, a clever tweet, or useful visual context when I’m helping other people out some project. I know you should think twice before putting animated GIFs on your webpage (because they tend to be huge), but I sometimes make that sin too.</p><p>There are loads of cool screen capture to GIF tools out there. An obvious mention is <a href="https://getkap.co">Kap</a> by <a href="https://github.com/wulkano/kap/graphs/contributors">these wonderful people</a>. It does a lot more than LICEcap, and is even written in the world-eating JavaScript programming language. In fact, I used it to screen capture how LICEcap works.</p><img src="https://cdn.sanity.io/images/ndjrels0/production/ffbaa72d85ee1494b1d7b885f3275e97ac46d1b2-1008x942.gif"><p>But the reason I’m always reaching for LICEcap when I need those moving pixels captured is that it records directly to the file. No post-processing. Apparently, that is a killer feature. Being able to quickly do the screen capture and have the GIF ready for sharing in the instant you stop the recording is really convenient. Turns out, convenience trumps feature lists.</p><img src="https://cdn.sanity.io/images/ndjrels0/production/5093216653dcfa256cf1a302b53d3a64bcd82dfa-841x463.png"><p>LICEcap doesn’t have a bunch of options and settings. But that’s fine for most parts. If I need more, that usually means that I should do the recording with something like <a href="http://www.telestream.net/screenflow/overview.htm">ScreenFlow</a> instead.</p><p>I actually thought my days with LICEcap were over, but writing this post made me discover that a 64-bit version has been out since February 2018, so shame on me.</p><p><em>Doing some minimal amounts of research for this post, I also discovered that LICEcap’s developer is <a href="https://en.wikipedia.org/wiki/Justin_Frankel">Justin Frankel of Winamp fame</a>.</em></p></div>]]></content:encoded></item></channel></rss>