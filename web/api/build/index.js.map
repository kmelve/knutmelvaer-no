{
  "version": 3,
  "sources": ["<stdin>", "../../node_modules/@remix-run/dev/compiler/shims/react.ts", "../../app/entry.server.tsx", "route-module:/Users/knutmelvaer/Sites/kmelve/knutmelvaer-no-v2/web/app/root.tsx", "../../app/lib/dateUtils.ts", "route-module:/Users/knutmelvaer/Sites/kmelve/knutmelvaer-no-v2/web/app/routes/blog/$year.$month.$slug.tsx", "../../app/lib/sanity/getClient.ts", "../../app/lib/sanity/config.ts", "../../app/components/BlogPost.tsx", "../../app/components/PortableText.tsx", "../../app/components/serializers/Block.tsx", "../../app/components/serializers/Code.tsx", "../../app/lib/sanity/urlFor.ts", "../../app/components/serializers/Image.tsx", "../../app/components/serializers/TwitterEmbed.tsx", "../../app/components/serializers/YouTube.tsx", "../../app/components/serializers/index.tsx", "../../app/components/TableOfContents.tsx", "route-module:/Users/knutmelvaer/Sites/kmelve/knutmelvaer-no-v2/web/app/routes/blog/index.tsx", "../../app/components/BlogPostPreview.tsx", "../../app/lib/queries/posts.ts", "../../app/lib/preparePost.ts", "route-module:/Users/knutmelvaer/Sites/kmelve/knutmelvaer-no-v2/web/app/routes/rss[.xml].ts", "route-module:/Users/knutmelvaer/Sites/kmelve/knutmelvaer-no-v2/web/app/routes/about.tsx", "../../app/lib/queries/about.ts", "route-module:/Users/knutmelvaer/Sites/kmelve/knutmelvaer-no-v2/web/app/routes/index.tsx", "../../app/components/ResourceItem.tsx", "../../app/lib/queries/index.ts"],
  "sourcesContent": ["\nimport * as entryServer from \"/Users/knutmelvaer/Sites/kmelve/knutmelvaer-no-v2/web/app/entry.server.tsx\";\nimport * as route0 from \"/Users/knutmelvaer/Sites/kmelve/knutmelvaer-no-v2/web/app/root.tsx\";\nimport * as route1 from \"/Users/knutmelvaer/Sites/kmelve/knutmelvaer-no-v2/web/app/routes/blog/$year.$month.$slug.tsx\";\nimport * as route2 from \"/Users/knutmelvaer/Sites/kmelve/knutmelvaer-no-v2/web/app/routes/blog/index.tsx\";\nimport * as route3 from \"/Users/knutmelvaer/Sites/kmelve/knutmelvaer-no-v2/web/app/routes/rss[.xml].ts\";\nimport * as route4 from \"/Users/knutmelvaer/Sites/kmelve/knutmelvaer-no-v2/web/app/routes/about.tsx\";\nimport * as route5 from \"/Users/knutmelvaer/Sites/kmelve/knutmelvaer-no-v2/web/app/routes/index.tsx\";\nexport { default as assets } from \"./assets.json\";\nexport const entry = { module: entryServer };\nexport const routes = {\n  \"root\": {\n    id: \"root\",\n    parentId: undefined,\n    path: \"\",\n    index: undefined,\n    caseSensitive: undefined,\n    module: route0\n  },\n  \"routes/blog/$year.$month.$slug\": {\n    id: \"routes/blog/$year.$month.$slug\",\n    parentId: \"root\",\n    path: \"blog/:year/:month/:slug\",\n    index: undefined,\n    caseSensitive: undefined,\n    module: route1\n  },\n  \"routes/blog/index\": {\n    id: \"routes/blog/index\",\n    parentId: \"root\",\n    path: \"blog\",\n    index: true,\n    caseSensitive: undefined,\n    module: route2\n  },\n  \"routes/rss[.xml]\": {\n    id: \"routes/rss[.xml]\",\n    parentId: \"root\",\n    path: \"rss.xml\",\n    index: undefined,\n    caseSensitive: undefined,\n    module: route3\n  },\n  \"routes/about\": {\n    id: \"routes/about\",\n    parentId: \"root\",\n    path: \"about\",\n    index: undefined,\n    caseSensitive: undefined,\n    module: route4\n  },\n  \"routes/index\": {\n    id: \"routes/index\",\n    parentId: \"root\",\n    path: undefined,\n    index: true,\n    caseSensitive: undefined,\n    module: route5\n  }\n};", "import * as React from \"react\";\nexport { React };\n", "import { renderToString } from \"react-dom/server\";\nimport { RemixServer } from \"remix\";\nimport type { EntryContext } from \"remix\";\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  let markup = renderToString(\n    <RemixServer context={remixContext} url={request.url} />\n  );\n\n  responseHeaders.set(\"Content-Type\", \"text/html\");\n\n  return new Response(\"<!DOCTYPE html>\" + markup, {\n    status: responseStatusCode,\n    headers: responseHeaders\n  });\n}\n", "import * as React from \"react\";\nimport {\n  Link,\n  NavLink,\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n  useCatch,\n  useLocation,\n} from \"remix\";\nimport type { LinksFunction } from \"remix\";\n\nimport app from \"~/styles/app.css\";\nimport { readableDate } from \"./lib/dateUtils\";\n//import globalStylesUrl from \"~/styles/global.css\";\n//import darkStylesUrl from \"~/styles/dark.css\";\n\n/**\n * The `links` export is a function that returns an array of objects that map to\n * the attributes for an HTML `<link>` element. These will load `<link>` tags on\n * every route in the app, but individual routes can include their own links\n * that are automatically unloaded when a user navigates away from the route.\n *\n * https://remix.run/api/app#links\n */\nexport let links: LinksFunction = () => {\n  return [{ rel: \"stylesheet\", href: app }];\n};\n\n/**\n * The root module's default export is a component that renders the current\n * route via the `<Outlet />` component. Think of this as the global layout\n * component for your app.\n */\nexport default function App() {\n  return (\n    <Document>\n      <Layout>\n        <Outlet />\n      </Layout>\n    </Document>\n  );\n}\n\nfunction Document({\n  children,\n  title,\n}: {\n  children: React.ReactNode;\n  title?: string;\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n        {title ? <title>{title}</title> : null}\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        {children}\n        <RouteChangeAnnouncement />\n        <ScrollRestoration />\n        <Scripts />\n        {process.env.NODE_ENV === \"development\" && <LiveReload />}\n      </body>\n    </html>\n  );\n}\n\nfunction Layout({ children }: React.PropsWithChildren<{}>) {\n  return (\n    <div className=\"container mx-auto w-full max-w-6xl px-2 xl:px-0\">\n      <header>\n        <div className=\"container flex flex-wrap py-2 flex-col md:flex-row items-center mb-4\">\n          <Link\n            to=\"/\"\n            title=\"Knut Melv\u00E6r\"\n            className=\"title-font font-medium text-gray-900\"\n          >\n            Knut Melv\u00E6r\n          </Link>\n          <nav\n            aria-label=\"Main navigation\"\n            className=\"md:mr-auto md:ml-4 py-4 md:py-1 md:pl-4 md:border-l md:border-gray-400 flex flex-wrap items-center text-base justify-center space-x-5\"\n          >\n            <NavLink to=\"/\" className=\"hover:text-gray-900\">\n              Home\n            </NavLink>\n            <NavLink to=\"/about\" className=\"hover:text-gray-900\">\n              About\n            </NavLink>\n            <NavLink\n              to=\"/rss.xml\"\n              className=\"hover:text-gray-900\"\n              reloadDocument\n            >\n              RSS\n            </NavLink>\n          </nav>\n        </div>\n      </header>\n      <div className=\"mb-12\">{children}</div>\n      <footer>\n        <p>&copy; Knut Melv\u00E6r\u00A0{readableDate(new Date().toISOString())}</p>\n      </footer>\n    </div>\n  );\n}\n\nexport function CatchBoundary() {\n  let caught = useCatch();\n\n  let message;\n  switch (caught.status) {\n    case 401:\n      message = (\n        <p>\n          Oops! Looks like you tried to visit a page that you do not have access\n          to.\n        </p>\n      );\n      break;\n    case 404:\n      message = (\n        <p>Oops! Looks like you tried to visit a page that does not exist.</p>\n      );\n      break;\n\n    default:\n      throw new Error(caught.data || caught.statusText);\n  }\n\n  return (\n    <Document title={`${caught.status} ${caught.statusText}`}>\n      <Layout>\n        <h1>\n          {caught.status}: {caught.statusText}\n        </h1>\n        {message}\n      </Layout>\n    </Document>\n  );\n}\n\nexport function ErrorBoundary({ error }: { error: Error }) {\n  console.error(error);\n  return (\n    <Document title=\"Error!\">\n      <Layout>\n        <div>\n          <h1>There was an error</h1>\n          <p>{error.message}</p>\n          <hr />\n          <p>\n            Hey, developer, you should replace this with what you want your\n            users to see.\n          </p>\n        </div>\n      </Layout>\n    </Document>\n  );\n}\n\nfunction RemixLogo(props: React.ComponentPropsWithoutRef<\"svg\">) {\n  return (\n    <svg\n      viewBox=\"0 0 659 165\"\n      version=\"1.1\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n      aria-labelledby=\"remix-run-logo-title\"\n      role=\"img\"\n      width=\"106\"\n      height=\"30\"\n      fill=\"currentColor\"\n      {...props}\n    >\n      <title id=\"remix-run-logo-title\">Remix Logo</title>\n      <path d=\"M0 161V136H45.5416C53.1486 136 54.8003 141.638 54.8003 145V161H0Z M133.85 124.16C135.3 142.762 135.3 151.482 135.3 161H92.2283C92.2283 158.927 92.2653 157.03 92.3028 155.107C92.4195 149.128 92.5411 142.894 91.5717 130.304C90.2905 111.872 82.3473 107.776 67.7419 107.776H54.8021H0V74.24H69.7918C88.2407 74.24 97.4651 68.632 97.4651 53.784C97.4651 40.728 88.2407 32.816 69.7918 32.816H0V0H77.4788C119.245 0 140 19.712 140 51.2C140 74.752 125.395 90.112 105.665 92.672C122.32 96 132.057 105.472 133.85 124.16Z\" />\n      <path d=\"M229.43 120.576C225.59 129.536 218.422 133.376 207.158 133.376C194.614 133.376 184.374 126.72 183.35 112.64H263.478V101.12C263.478 70.1437 243.254 44.0317 205.11 44.0317C169.526 44.0317 142.902 69.8877 142.902 105.984C142.902 142.336 169.014 164.352 205.622 164.352C235.83 164.352 256.822 149.76 262.71 123.648L229.43 120.576ZM183.862 92.6717C185.398 81.9197 191.286 73.7277 204.598 73.7277C216.886 73.7277 223.542 82.4317 224.054 92.6717H183.862Z\" />\n      <path d=\"M385.256 66.5597C380.392 53.2477 369.896 44.0317 349.672 44.0317C332.52 44.0317 320.232 51.7117 314.088 64.2557V47.1037H272.616V161.28H314.088V105.216C314.088 88.0638 318.952 76.7997 332.52 76.7997C345.064 76.7997 348.136 84.9917 348.136 100.608V161.28H389.608V105.216C389.608 88.0638 394.216 76.7997 408.04 76.7997C420.584 76.7997 423.4 84.9917 423.4 100.608V161.28H464.872V89.5997C464.872 65.7917 455.656 44.0317 424.168 44.0317C404.968 44.0317 391.4 53.7597 385.256 66.5597Z\" />\n      <path d=\"M478.436 47.104V161.28H519.908V47.104H478.436ZM478.18 36.352H520.164V0H478.18V36.352Z\" />\n      <path d=\"M654.54 47.1035H611.788L592.332 74.2395L573.388 47.1035H527.564L568.78 103.168L523.98 161.28H566.732L589.516 130.304L612.3 161.28H658.124L613.068 101.376L654.54 47.1035Z\" />\n    </svg>\n  );\n}\n\n/**\n * Provides an alert for screen reader users when the route changes.\n */\nconst RouteChangeAnnouncement = React.memo(() => {\n  let [hydrated, setHydrated] = React.useState(false);\n  let [innerHtml, setInnerHtml] = React.useState(\"\");\n  let location = useLocation();\n\n  React.useEffect(() => {\n    setHydrated(true);\n  }, []);\n\n  let firstRenderRef = React.useRef(true);\n  React.useEffect(() => {\n    // Skip the first render because we don't want an announcement on the\n    // initial page load.\n    if (firstRenderRef.current) {\n      firstRenderRef.current = false;\n      return;\n    }\n\n    let pageTitle = location.pathname === \"/\" ? \"Home page\" : document.title;\n    setInnerHtml(`Navigated to ${pageTitle}`);\n  }, [location.pathname]);\n\n  // Render nothing on the server. The live region provides no value unless\n  // scripts are loaded and the browser takes over normal routing.\n  if (!hydrated) {\n    return null;\n  }\n\n  return (\n    <div\n      aria-live=\"assertive\"\n      aria-atomic\n      id=\"route-change-region\"\n      style={{\n        border: \"0\",\n        clipPath: \"inset(100%)\",\n        clip: \"rect(0 0 0 0)\",\n        height: \"1px\",\n        margin: \"-1px\",\n        overflow: \"hidden\",\n        padding: \"0\",\n        position: \"absolute\",\n        width: \"1px\",\n        whiteSpace: \"nowrap\",\n        wordWrap: \"normal\",\n      }}\n    >\n      {innerHtml}\n    </div>\n  );\n});\n", "import { parseISO, format } from \"date-fns\";\n\nexport const readableDate = (date: string): string | undefined => {\n  if (date) {\n    return format(parseISO(date), \"yyyy-MM-dd\");\n  }\n  return undefined;\n};\n\nexport const slugDate = (date: string): string | undefined => {\n  if (date) {\n    return format(parseISO(date), \"yyyy/MM\");\n  }\n  return undefined;\n};\n", "import { useLoaderData } from \"remix\";\nimport { sanityClient } from \"~/lib/sanity/getClient\";\nimport BlogPost from \"~/components/BlogPost\";\nimport { slugDate, readableDate } from \"~/lib/dateUtils\";\nexport async function loader({ params }: any) {\n  const { slug } = params;\n\n  const post = await sanityClient.fetch(\n    `*[_type == \"post\" && slug.current == $slug][0]`,\n    { slug }\n  );\n\n  return {\n    post: {\n      ...post,\n      ...post,\n      slug: `${slugDate(post?.publishedAt)}/${post.slug?.current}`,\n      publishedAt: readableDate(post.publishedAt),\n    },\n  };\n}\n\nexport default function Post() {\n  const { post } = useLoaderData();\n  return <BlogPost post={post} />;\n}\n", "import PicoSanity from 'picosanity'\n\nimport { config } from './config'\n\nexport const sanityClient = new PicoSanity(config)\n\nexport const getClient = () => sanityClient\n\n", "export const config = {\n  projectId: \"ndjrels0\",\n  dataset: \"production\",\n  useCdn: false,\n  apiVersion: \"2021-11-25\",\n};\n", "import { Link } from \"remix\";\nimport { PortableText } from \"~/components/PortableText\";\nimport { urlFor } from \"~/lib/sanity/urlFor\";\nimport TableOfContents from \"./TableOfContents\";\n\ninterface Post {\n  _id?: string;\n  _type?: string;\n  title?: string;\n  slug?: {\n    current?: string;\n  };\n  publishedAt?: string;\n  body?: any;\n  mainImage?: any;\n}\n\nexport default function BlogPost({ post }: { post: Post }) {\n  const { title, body, publishedAt, mainImage } = post;\n  return (\n    <>\n      <figure>\n        <img\n          className=\"w-full rounded-sm mb-10\"\n          src={urlFor(post.mainImage)\n            .height(350)\n            .width(900)\n            .auto(\"format\")\n            .url()}\n          alt={post.mainImage.alt}\n        />\n      </figure>\n      <div className=\"flex flex-col md:flex-row\">\n        <article className=\"prose mr-20 w-full md:w-8/12\">\n          <h1>{title}</h1>\n          <PortableText blocks={body} />\n          <Link to=\"/\">Moar posts!</Link>\n        </article>\n        <aside className=\"pt-28 w-4/12\">\n          <div className=\"p-4 bg-gray-100 rounded mb-4\">\n            <div className=\"text-sm\">\n              Published <time dateTime={publishedAt}>{publishedAt}</time>\n              {/* <div>Reading time</div>\n            <h3>Author</h3>\n            <h3>Categories</h3>\n            <h3>Twitter / Webmentions</h3> */}\n            </div>\n          </div>\n          <TableOfContents blocks={body} />\n        </aside>\n      </div>\n    </>\n  );\n}\n", "import BlockContent from \"@sanity/block-content-to-react\";\nimport { sanityClient } from \"../lib/sanity/getClient\";\nimport serializers from \"./serializers/index\";\n\nexport const PortableText = ({ blocks }: { blocks: any }) => {\n  return (\n    <BlockContent\n      imageOptions={sanityClient}\n      blocks={blocks}\n      serializers={serializers}\n    />\n  );\n};\n", "import PortableText from \"@sanity/block-content-to-react\";\n\nexport default function Block(props: any) {\n  const { style = \"normal\", _key } = props.node;\n\n  if (/^h\\d/.test(style)) {\n    const HeadingTag = style;\n    const headingId = `h${_key}`;\n    return (\n      <HeadingTag id={headingId} className=\"group flex whitespace-pre-wrap\">\n        <a\n          href={`#${headingId}`}\n          aria-hidden=\"true\"\n          tabIndex={-1}\n          className=\"absolute after:hash opacity-0 group-hover:opacity-100\"\n          style={{\n            marginLeft: \"-1em\",\n            paddingRight: \"0.5em\",\n            boxShadow: \"none\",\n            color: \"rgb(161, 161, 170)\",\n          }}\n        >\n          #\n        </a>\n        <span>{props.children}</span>\n      </HeadingTag>\n    );\n  }\n\n  if (style === \"blockquote\") {\n    return <blockquote>{props.children}</blockquote>;\n  }\n\n  // Fall back to default handling\n  return PortableText.defaultSerializers.types.block(props);\n}\n", "import Highlight, { defaultProps } from \"prism-react-renderer\";\nimport github from \"prism-react-renderer/themes/github\";\n\ntype Code = {\n  code: string;\n  language: string;\n};\n\nconst languageOverrides = (lang: string) =>\n  ({\n    sh: \"shell-session\",\n  }[lang] ||\n  lang ||\n  \"text\");\n\nexport default function Code({ node }: { node: Code }) {\n  const { code, language } = node;\n  return (\n    <Highlight {...defaultProps} code={code} language={language} theme={github}>\n      {({ className, style, tokens, getLineProps, getTokenProps }) => (\n        <pre className={className} style={style}>\n          {tokens.map((line, i) => (\n            // eslint-disable-next-line react/jsx-key\n            <div {...getLineProps({ line, key: i })}>\n              {line.map((token, key) => (\n                // eslint-disable-next-line react/jsx-key\n                <span {...getTokenProps({ token, key })} />\n              ))}\n            </div>\n          ))}\n        </pre>\n      )}\n    </Highlight>\n  );\n}\n", "import imageUrlBuilder from \"@sanity/image-url\";\nimport {\n  SanityImageObject,\n  ImageUrlBuilderOptions,\n} from \"@sanity/image-url/lib/types/types\";\n\nimport { sanityClient } from \"./getClient\";\n\nexport const urlFor = (source: SanityImageObject) =>\n  imageUrlBuilder(sanityClient).image(source);\n", "import { urlFor } from \"~/lib/sanity/urlFor\";\n\nexport default function Image({ node }: { node: any }) {\n  const { asset, alt, caption, credit, url } = node;\n  return <img src={urlFor(asset).url()} />;\n}\n", "import { TwitterTweetEmbed } from \"react-twitter-embed\";\ntype TweetEmbed = {\n  url: string;\n  title: string;\n};\n\nexport default function TweetEmbed({ node }: { node: TweetEmbed }) {\n  const { url, title } = node;\n  if (!url) {\n    return null;\n  }\n  const exp = /\\/status\\/(\\d+)($|[?/])/;\n  const [, id] = exp.exec(url) || [];\n\n  if (id) {\n    return (\n      <TwitterTweetEmbed\n        tweetId={id}\n        options={{ conversation: \"none\", \"hide-thread\": true }}\n      />\n    );\n  }\n  return null;\n}\n", "import getYouTubeId from \"get-youtube-id\";\nimport YouTubeEmbed from \"react-youtube\";\n\ntype YouTube = {\n  url: string;\n  caption?: string;\n  credit?: string;\n};\n\nexport default function YouTube({ node }: { node: YouTube }) {\n  const { url /* , caption, credit */ } = node;\n  const id = getYouTubeId(url) || undefined;\n  return <YouTubeEmbed videoId={id} />;\n}\n", "// import { Link } from \"remix\";\nimport Block from \"./Block\";\nimport Code from \"./Code\";\nimport Image from \"./Image\";\nimport TwitterEmbed from \"./TwitterEmbed\";\nimport YouTube from \"./YouTube\";\n// import { getBlogUrl } from \"../lib/helpers\";\n// import ReactTooltip from \"react-tooltip\";\n/**\n * Remeber the RSS serializers too!\n */\nconst serializers: any = {\n  //container: ({ children }: any) => <React.Fragment>{children}</React.Fragment>,\n  types: {\n    block: Block,\n    // authorReference: ({ node }) => <span>{node.author.name}</span>,\n    mainImage: Image,\n    code: Code,\n    youtube: YouTube,\n    twitter: TwitterEmbed,\n    // youtube: YouTube,\n  },\n  marks: {\n    internalLink: () => null,\n    /* internalLink: ({ mark, children }) => {\n      const { publishedAt, slug, _type } = mark.reference;\n      if (_type == \"post\") {\n        const path = getBlogUrl(publishedAt, slug);\n        return <Link to={path}>{children}</Link>;\n      }\n      console.log(\"Unknown internal link type \", mark.reference);\n      return <span>{children}</span>;\n    }, */\n  },\n};\n\nexport default serializers;\n", "import { Link } from \"remix\";\nimport BlockContent from \"@sanity/block-content-to-react\";\n\nconst serializers = {\n  types: {\n    block: (props: any) => {\n      const { node } = props;\n      const { style, _key, listItem } = node;\n      if (style.startsWith(\"h\") && !listItem) {\n        let level = style.substring(1);\n\n        return (\n          <li className=\"mb-2 text-sm\">\n            <Link to={`#h${_key}`} className={level > 2 ? \" mr-4\" : \"\"}>\n              {props.children}\n            </Link>\n          </li>\n        );\n      }\n      return null;\n    },\n  },\n};\n\nexport default function TableOfContents(props: any) {\n  const { blocks } = props;\n  const onlyBlocks = blocks.filter(\n    ({ _type, style = \"\" }: { _type: string; style: string }) =>\n      _type === \"block\" && style.startsWith(\"h\")\n  );\n  if (onlyBlocks.length === 0) {\n    return null;\n  }\n  return (\n    <nav className=\"p-4 bg-gray-100 rounded sticky top-6\">\n      <h3 className=\"text-xs mb-4\">Table of contents</h3>\n      <ul>\n        <BlockContent blocks={onlyBlocks} serializers={serializers} />\n      </ul>\n    </nav>\n  );\n}\n", "import { Outlet, useLoaderData } from \"remix\";\nimport { sanityClient } from \"~/lib/sanity/getClient\";\nimport BlogPostPreview from \"~/components/BlogPostPreview\";\n\nimport { postsQuery } from \"~/lib/queries/posts\";\nimport { preparedPosts } from \"~/lib/preparePost\";\nexport async function loader() {\n  const posts = await sanityClient.fetch(postsQuery);\n\n  return { posts: preparedPosts(posts) };\n}\n\nexport default function Blog() {\n  let { posts = [] } = useLoaderData();\n\n  return (\n    <main>\n      <h2 className=\"leading-none font-black text-xl md:text-2xl\">Posts</h2>\n      {posts.length > 0 && posts.map(BlogPostPreview)}\n    </main>\n  );\n}\n", "import { Link } from \"remix\";\nimport { urlFor } from \"~/lib/sanity/urlFor\";\nimport { PortableText } from \"~/components/PortableText\";\nimport { SanityImageObject } from \"@sanity/image-url/lib/types/types\";\n\nexport interface BlogPost {\n  _id: string;\n  title: string;\n  publishedAt: string;\n  slug: string;\n  excerpt?: unknown;\n  mainImage?: SanityImageObject;\n}\n\nexport default function BlogPostPreview(props: BlogPost) {\n  const { _id, title, publishedAt, slug, excerpt, mainImage } = props;\n\n  return (\n    <Link\n      key={_id}\n      to={`${slug}`}\n      className={`flex flex-col md:flex-row max-w-2xl mb-6\n      bg-gray-100 rounded p-4 hover:bg-gray-200\n      transition-shadow duration-200 hover:shadow`}\n    >\n      <div className=\"w-full md:w-10/12\">\n        <small className=\"font-grey\">{publishedAt}</small>\n        <h2 className=\"leading-none font-black md:text-xl mb-2\">{title}</h2>\n        <PortableText blocks={excerpt} />\n      </div>\n    </Link>\n  );\n}\n", "export const postsQuery = `//groq\n*[\n    _type == \"post\"\n    && slug.current != null\n  ]|order(publishedAt desc)`;\n", "import { readableDate, slugDate } from \"~/lib/dateUtils\";\nimport { BlogPost } from \"~/components/BlogPostPreview\";\n\n/**\n *\n * @param posts An array of posts\n * @param root To generate the correct slug, we need the root path\n * @returns The prepared posts with readable date and the dated slug\n */\n\nexport const preparedPosts = (posts: [BlogPost], root?: string) =>\n  posts.map((post: any) => ({\n    ...post,\n    slug: `${root && root + \"/\"}${slugDate(post?.publishedAt)}/${\n      post.slug?.current\n    }`,\n    publishedAt: readableDate(post.publishedAt),\n  }));\n", "import { Outlet, useLoaderData } from \"remix\";\nimport { Feed } from \"feed\";\nimport utf8 from \"utf8\";\nimport { sanityClient } from \"~/lib/sanity/getClient\";\nimport PortableText, { h } from \"@sanity/block-content-to-html\";\nimport { postsQuery } from \"~/lib/queries/posts\";\nimport { urlFor } from \"~/lib/sanity/urlFor\";\nimport { preparedPosts } from \"~/lib/preparePost\";\n\ntype Item = {\n  title: string;\n  link: string;\n  description: string;\n  pubDate: string;\n  guid: string;\n};\n\nlet PortableTextToXML = (blocks: any) =>\n  PortableText({\n    blocks,\n    serializers: {\n      marks: {\n        internalLink: ({ mark, children }: { mark: any; children: any }) => {\n          let { publishedAt, slug, _type } = mark.reference;\n          if (_type == \"post\") {\n            return h(\n              \"a\",\n              {\n                href: `https://www.knutmelvaer.no/${slug}`,\n              },\n              children\n            );\n          }\n          console.log(\"Unknown internal link type \", mark.reference);\n          return h(\"span\", {}, children);\n        },\n      },\n      types: {\n        authorReference: ({ node }: { node: any }) =>\n          h(\"span\", { innerHTML: node.author.name }),\n        youtube: ({ node }: { node: any }) =>\n          h(\n            \"p\",\n            {},\n            h(\"a\", {\n              href: node.url,\n              innerHTML: \"Watch on Youtube.\",\n            })\n          ),\n        code: ({ node }: { node: any }) =>\n          h(\"pre\", h(\"code\", { lang: node.language }, node.code)),\n        mainImage: ({ node }: { node: any }) =>\n          h(\"img\", {\n            src: urlFor(node.asset).url(),\n          }),\n        twitter: ({ node }: { node: any }) =>\n          h(\n            \"p\",\n            {},\n            h(\"a\", {\n              href: node.url,\n              innerHTML: \"Look at the tweet.\",\n            })\n          ),\n      },\n    },\n  });\n\nexport async function loader({ params }: { params: any }) {\n  let posts = await sanityClient\n    .fetch(postsQuery)\n    .then((docs) => preparedPosts(docs, \"https://www.knutmelvaer.no\"))\n    .then((posts) =>\n      posts.map((post: any) => ({\n        ...post,\n        body: PortableTextToXML(post.body),\n      }))\n    );\n  let feed = new Feed({\n    title: \"Knut Melvaer\",\n    description: \"Knut Melvaer's blog\",\n    id: \"https://www.knutmelvaer.no/rss.xml\",\n    link: \"https://www.knutmelvaer.no\",\n    image: \"https://www.knutmelvaer.no/logo.png\",\n    copyright: \"Knut Melvaer\",\n    updated: new Date(posts[0].publishedAt),\n    generator: \"Remix\",\n    feedLinks: {\n      json: \"https://www.knutmelvaer.no/rss.json\",\n      atom: \"https://www.knutmelvaer.no/rss.xml\",\n    },\n  });\n  posts.forEach((post) => {\n    feed.addItem({\n      title: post.title,\n      id: post.slug,\n      link: `https://www.knutmelvaer.no/${post.slug}`,\n      description: post.body,\n      content: post.body,\n      author: [{ name: post.authors[0].name }],\n    });\n  });\n  let rssString = feed.rss2();\n\n  return new Response(rssString, {\n    status: 200,\n    headers: {\n      \"Content-Type\": \"application/xml\",\n    },\n  });\n}\n", "import { useLoaderData } from \"remix\";\nimport { PortableText } from \"~/components/PortableText\";\nimport { aboutQuery } from \"~/lib/queries/about\";\nimport { sanityClient } from \"~/lib/sanity/getClient\";\n\nexport async function loader() {\n  const about = await sanityClient.fetch(aboutQuery);\n  return { about };\n}\n\nexport default function About() {\n  const { about } = useLoaderData();\n  const { bio } = about;\n  return (\n    <main className=\"prose\">\n      <h2>About</h2>\n      <PortableText blocks={bio} />\n    </main>\n  );\n}\n", "export const aboutQuery = `//groq\n*[_type == \"person\" && slug.current == \"knut-melvaer\"][0]{\n  name,\n  image,\n  bio,\n  twitter\n}`;\n", "import type { MetaFunction, LoaderFunction } from \"remix\";\nimport { useLoaderData, json, Link } from \"remix\";\nimport BlogPostPreview from \"~/components/BlogPostPreview\";\nimport { BlogPost } from \"~/components/BlogPostPreview\";\nimport ResourceItem from \"~/components/ResourceItem\";\n\nimport { preparedPosts } from \"~/lib/preparePost\";\nimport { indexQuery } from \"~/lib/queries\";\nimport { sanityClient } from \"~/lib/sanity/getClient\";\nimport { urlFor } from \"~/lib/sanity/urlFor\";\n\nexport type Link = {\n  _key: string;\n  text: string;\n  link: {\n    href: string;\n  };\n};\n\nexport type InternalLink = {\n  _key: string;\n  text: string;\n  slug: {\n    current: string;\n  };\n};\n\ntype IndexData = {\n  siteSettings: {\n    title: string;\n    description: string;\n    keywords: [string];\n    author: {\n      name: string;\n      image: {\n        asset: {\n          _ref: string;\n          _type: string;\n        };\n      };\n    };\n    resources: Array<Link>;\n  };\n  posts: [BlogPost];\n  resources: Array<{ name: string; url: string }>;\n};\n\n// Loaders provide data to components and are only ever called on the server, so\n// you can connect to a database or run any server side code you want right next\n// to the component that renders it.\n// https://remix.run/api/conventions#loader\nexport let loader: LoaderFunction = async () => {\n  const { siteSettings, posts } = await sanityClient.fetch(indexQuery);\n  return {\n    siteSettings,\n    posts: preparedPosts(posts, \"blog\"),\n  };\n};\n\n// https://remix.run/api/conventions#meta\nexport let meta: MetaFunction = () => {\n  return {\n    title: \"Knut Melv\u00E6r\",\n    description: \"The personal blog.\",\n  };\n};\n\n// https://remix.run/guides/routing#index-routes\nexport default function Index() {\n  let { siteSettings, posts } = useLoaderData<IndexData>();\n  const { title, description, keywords, author, resources } = siteSettings;\n  return (\n    <div className=\"flex flex-wrap px-4 md:px-0\">\n      <div className=\"md:w-10/12 prose mb-12\">\n        <p>{description}</p>\n      </div>\n      <main className=\"w-full pr-6 sm:w-9/12 lg:w-8/12\">\n        <div className=\"prose mb-4\">\n          <h3>Musings</h3>\n        </div>\n        {posts.length > 0 && posts.map(BlogPostPreview)}\n      </main>\n      <aside className=\"w-full sm:w-3/12 lg:w-2/12\">\n        <div className=\"prose\">\n          <h3 className=\"my-0\">Links</h3>\n          <ul>{resources?.length > 0 && resources.map(ResourceItem)}</ul>\n        </div>\n      </aside>\n    </div>\n  );\n}\n", "import { Link, InternalLink } from \"~/routes/index\";\n\nexport default function ResourceItem(props: Link) {\n  const { _key, link, text } = props;\n  return (\n    <li key={_key}>\n      <a href={link?.href}>{text}</a>\n    </li>\n  );\n}\n", "export const indexQuery = `//groq\n{\n  \"siteSettings\": *[_id == \"siteSettings\"][0]{\n    title,\n    url,\n    keywords,\n    description,\n    author->{\n      name,\n      image\n    },\n    resources[]{\n      _key,\n      \"link\" != null => @,\n      _type == \"internalLink\" => @->{\n        _id,\n        slug\n      }\n    }\n  },\n  \"posts\": *[\n    _type == \"post\"\n    && slug.current != null\n  ]|order(publishedAt desc){\n    ...,\n    body[]{\n      ...,\n      \"link\" != null => @,\n      _type == \"internalLink\" => @->{\n        _id,\n        slug,\n      }\n    }\n  }\n}`;\n"],
  "mappings": "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",
  "names": []
}
